diff --git a/src/struct_ls/pfmg_solve.c b/src/struct_ls/pfmg_solve.c
index 7e2746cbd..3827a193d 100644
--- a/src/struct_ls/pfmg_solve.c
+++ b/src/struct_ls/pfmg_solve.c
@@ -249,6 +249,12 @@ hypre_PFMGSolve( void               *pfmg_vdata,
          /*--------------------------------------------------
           * Bottom
           *--------------------------------------------------*/
+#if defined(HYPRE_USING_CUDA)
+         if (hypre_StructGridDataLocation(hypre_StructVectorGrid(x_l[l])) == HYPRE_MEMORY_HOST)
+         {
+            hypre_SetDeviceOff();
+         }
+#endif
 
          if (active_l[l])
          {
diff --git a/src/struct_mv/_hypre_struct_mv.h b/src/struct_mv/_hypre_struct_mv.h
index bc818f1bc..64eb0acd0 100644
--- a/src/struct_mv/_hypre_struct_mv.h
+++ b/src/struct_mv/_hypre_struct_mv.h
@@ -758,13 +758,20 @@ struct ColumnSums
 
 #define HYPRE_LAMBDA [=] __host__  __device__
 #define BLOCKSIZE 512
+/*#define CUDA_CALL( call )               \
+{                                       \
+	if ( cudaSuccess != call ){         \
+		printf("custom CUDA Error at %s %d: %s %s\n", __FILE__, __LINE__,cudaGetErrorName( call ),  cudaGetErrorString( call ) );  \
+		exit(1);						\
+	}									\
+}*/
 
 typedef struct hypre_Boxloop_struct
 {
-   HYPRE_Int lsize0,lsize1,lsize2;
-   HYPRE_Int strides0,strides1,strides2;
-   HYPRE_Int bstart0,bstart1,bstart2;
-   HYPRE_Int bsize0,bsize1,bsize2;
+   HYPRE_Int lsize0{1},lsize1{1},lsize2{1};
+   HYPRE_Int strides0{0},strides1{0},strides2{0};
+   HYPRE_Int bstart0{0},bstart1{0},bstart2{0};
+   HYPRE_Int bsize0{1},bsize1{1},bsize2{1};
 } hypre_Boxloop;
 
 #if 1
@@ -787,6 +794,51 @@ typedef struct hypre_Boxloop_struct
 
 extern "C++" {
 
+extern int ___cuda_threads_x, ___cuda_threads_y, ___cuda_threads_z;	//Damodar: 3D loop
+
+template <typename LOOP_BODY>
+__global__ void forall_kernel3d(LOOP_BODY loop_body, HYPRE_Int lengthx, HYPRE_Int lengthy, HYPRE_Int lengthz)	//Damodar: 3D loop
+{
+   HYPRE_Int idx = blockDim.x * blockIdx.x + threadIdx.x;
+   HYPRE_Int idy = blockDim.y * blockIdx.y + threadIdx.y;
+   HYPRE_Int idz = blockDim.z * blockIdx.z + threadIdx.z;
+   if(idx < lengthx && idy < lengthy && idz < lengthz)
+	   loop_body(idx, idy, idz);
+}
+
+template<typename LOOP_BODY>
+void BoxLoopforall3D(HYPRE_Int policy, HYPRE_Int lengthx, HYPRE_Int lengthy, HYPRE_Int lengthz, LOOP_BODY loop_body)	//Damodar: 3D loop
+{
+	 if(lengthx*lengthy*lengthz == 0)
+		return;
+   if (policy == HYPRE_MEMORY_HOST)
+   {
+#ifdef HYPRE_USING_OPENMP
+#pragma omp parallel for collapse(3) HYPRE_SMP_SCHEDULE
+#endif
+	  for (HYPRE_Int idz = 0; idz < lengthz; idz++)
+	  for (HYPRE_Int idy = 0; idy < lengthy; idy++)
+      for (HYPRE_Int idx = 0; idx < lengthx; idx++)
+      {
+         loop_body(idx, idy, idz);
+      }
+   }
+   else if (policy == HYPRE_MEMORY_DEVICE)
+   {
+      dim3 blocks((lengthx+___cuda_threads_x-1)/___cuda_threads_x, (lengthy+___cuda_threads_y-1)/___cuda_threads_y, (lengthz+___cuda_threads_z-1)/___cuda_threads_z), threads(___cuda_threads_x, ___cuda_threads_y, ___cuda_threads_z);
+      blocks.x = blocks.x < 1 ? 1 : blocks.x;	//set length to at least 1
+      blocks.y = blocks.y < 1 ? 1 : blocks.y;
+      blocks.z = blocks.z < 1 ? 1 : blocks.z;
+
+      forall_kernel3d<<<blocks, threads>>>(loop_body, lengthx, lengthy, lengthz);
+      //CUDA_CALL(cudaDeviceSynchronize());
+   }
+   else if (policy == 2)
+   {
+   }
+}
+
+
 template <typename LOOP_BODY>
 __global__ void forall_kernel(LOOP_BODY loop_body, HYPRE_Int length)
 {
@@ -818,6 +870,7 @@ void BoxLoopforall(HYPRE_Int policy, HYPRE_Int length, LOOP_BODY loop_body)
          gridSize = 1;
       }
       forall_kernel<<<gridSize, BLOCKSIZE>>>(loop_body, length);
+      //CUDA_CALL(cudaDeviceSynchronize());
    }
    else if (policy == 2)
    {
@@ -853,21 +906,27 @@ void ReductionBoxLoopforall(HYPRE_Int policy, HYPRE_Int length, LOOP_BODY Reduct
                    length, BLOCKSIZE, gridSize);
       */
       reductionforall_kernel<<<gridSize, BLOCKSIZE>>>(ReductionLoop, length);
+      //CUDA_CALL(cudaDeviceSynchronize());
    }
 }
 
 }
 
-
-#define hypre_BoxLoopIncK(k,box,hypre__i)                                               \
-   HYPRE_Int hypre_boxD##k = 1;                                                         \
-   HYPRE_Int hypre__i = 0;                                                              \
-   hypre__i += (hypre_IndexD(local_idx, 0)*box.strides0 + box.bstart0) * hypre_boxD##k; \
-   hypre_boxD##k *= hypre_max(0, box.bsize0 + 1);                                       \
-   hypre__i += (hypre_IndexD(local_idx, 1)*box.strides1 + box.bstart1) * hypre_boxD##k; \
-   hypre_boxD##k *= hypre_max(0, box.bsize1 + 1);                                       \
-   hypre__i += (hypre_IndexD(local_idx, 2)*box.strides2 + box.bstart2) * hypre_boxD##k; \
-   hypre_boxD##k *= hypre_max(0, box.bsize2 + 1);
+//Damodar: 3D loop. No need to call hypre_newBoxLoopDeclare and use local_idx. Directly using 3d indexes from cuda
+//also simplified index calc by eliminating hypre_boxD##k and hypermax(bsize, 1) etc.
+#define hypre_BoxLoopIncK3D(k,box,hypre__i)             \
+   HYPRE_Int hypre__i = 		                        \
+   + (idx*box.strides0 + box.bstart0) * 1 	  			\
+   + (idy*box.strides1 + box.bstart1) * box.bsize1	 	\
+   + (idz*box.strides2 + box.bstart2) * box.bsize2;
+
+//Damodar: also simplified index calc by eliminating hypre_boxD##k and hypermax(bsize, 1) etc.
+//those calculation shifted to hypre_BoxLoopDataDeclareK outside parallel loop.
+#define hypre_BoxLoopIncK(k,box,hypre__i)                                   \
+   HYPRE_Int hypre__i =                                                     \
+   + (hypre_IndexD(local_idx, 0)*box.strides0 + box.bstart0) * 1 			\
+   + (hypre_IndexD(local_idx, 1)*box.strides1 + box.bstart1) * box.bsize1 	\
+   + (hypre_IndexD(local_idx, 2)*box.strides2 + box.bstart2) * box.bsize2;
 
 #define hypre_newBoxLoopInit(ndim,loop_size)            \
   HYPRE_Int hypre__tot = 1;                             \
@@ -888,10 +947,11 @@ void ReductionBoxLoopforall(HYPRE_Int policy, HYPRE_Int length, LOOP_BODY Reduct
   idx_local = idx_local / box.lsize1;                   \
   hypre_IndexD(local_idx, 2)  = idx_local % box.lsize2; \
 
-#define hypre_newBoxLoop0Begin(ndim, loop_size)                            \
-{                                                                          \
-   hypre_newBoxLoopInit(ndim,loop_size);                                   \
-   BoxLoopforall(hypre_exec_policy,hypre__tot,HYPRE_LAMBDA (HYPRE_Int idx) \
+//Damodar: 3D loop
+#define hypre_newBoxLoop0Begin(ndim, loop_size)                  \
+{                                                                \
+   hypre_BoxLoopDataDeclareK(1,ndim,loop_size,dbox1,start1,stride1);        \
+   BoxLoopforall3D(hypre_exec_policy, loop_size[0], loop_size[1], loop_size[2], HYPRE_LAMBDA (HYPRE_Int idx, HYPRE_Int idy, HYPRE_Int idz)  \
    {
 
 #define hypre_newBoxLoop0End() \
@@ -904,84 +964,71 @@ hypre_Boxloop databox##k;                                             \
 databox##k.lsize0 = loop_size[0];                                     \
 databox##k.strides0 = stride[0];                                      \
 databox##k.bstart0  = start[0] - dbox->imin[0];                       \
-databox##k.bsize0   = dbox->imax[0]-dbox->imin[0];                    \
+databox##k.bsize0   = 1;				  \
 if (ndim > 1)                                                         \
 {                                                                     \
    databox##k.lsize1 = loop_size[1];                                  \
    databox##k.strides1 = stride[1];                                   \
    databox##k.bstart1  = start[1] - dbox->imin[1];                    \
-   databox##k.bsize1   = dbox->imax[1]-dbox->imin[1];                 \
-}                                                                     \
-else                                                                  \
-{                                                                     \
-   databox##k.lsize1 = 1;                                             \
-   databox##k.strides1 = 0;                                           \
-   databox##k.bstart1  = 0;                                           \
-   databox##k.bsize1   = 0;                                           \
+   databox##k.bsize1   = dbox->imax[0]-dbox->imin[0] + 1;  /*note imax[0] and NOT imax[1]*/            \
+   databox##k.bsize1   = hypre_max(0, databox##k.bsize1) * databox##k.bsize0;			  \
 }                                                                     \
 if (ndim == 3)                                                        \
 {                                                                     \
    databox##k.lsize2 = loop_size[2];                                  \
    databox##k.strides2 = stride[2];                                   \
    databox##k.bstart2  = start[2] - dbox->imin[2];                    \
-   databox##k.bsize2   = dbox->imax[2]-dbox->imin[2];                 \
-}                                                                     \
-else                                                                  \
-{                                                                     \
-   databox##k.lsize2 = 1;                                             \
-   databox##k.strides2 = 0;                                           \
-   databox##k.bstart2  = 0;                                           \
-   databox##k.bsize2   = 0;                                           \
+   databox##k.bsize2   = dbox->imax[1]-dbox->imin[1] + 1;  /*note imax[1] and NOT imax[2]*/           \
+   databox##k.bsize2   = hypre_max(0, databox##k.bsize2) * databox##k.bsize1;			  \
 }
 
+//Damodar: 3D loop
 #define hypre_newBoxLoop1Begin(ndim, loop_size,                             \
                                dbox1, start1, stride1, i1)                  \
 {                                                                           \
-    hypre_newBoxLoopInit(ndim,loop_size);                                   \
-    hypre_BoxLoopDataDeclareK(1,ndim,loop_size,dbox1,start1,stride1);       \
-    BoxLoopforall(hypre_exec_policy,hypre__tot,HYPRE_LAMBDA (HYPRE_Int idx) \
-    {                                                                       \
-      hypre_newBoxLoopDeclare(databox1);                                    \
-      hypre_BoxLoopIncK(1,databox1,i1);
+   hypre_BoxLoopDataDeclareK(1,ndim,loop_size,dbox1,start1,stride1);        \
+   BoxLoopforall3D(hypre_exec_policy, loop_size[0], loop_size[1], loop_size[2], HYPRE_LAMBDA (HYPRE_Int idx, HYPRE_Int idy, HYPRE_Int idz)  \
+   {                                                                        \
+		 hypre_BoxLoopIncK3D(1,databox1,i1);
 
 #define hypre_newBoxLoop1End(i1) \
     });                          \
     hypre_fence();               \
 }
 
+//Damodar: 3D loop
 #define hypre_newBoxLoop2Begin(ndim, loop_size,                             \
                                dbox1, start1, stride1, i1,                  \
                                dbox2, start2, stride2, i2)                  \
 {                                                                           \
-    hypre_newBoxLoopInit(ndim,loop_size);                                   \
-    hypre_BoxLoopDataDeclareK(1,ndim,loop_size,dbox1,start1,stride1);       \
-    hypre_BoxLoopDataDeclareK(2,ndim,loop_size,dbox2,start2,stride2);       \
-    BoxLoopforall(hypre_exec_policy,hypre__tot,HYPRE_LAMBDA (HYPRE_Int idx) \
-    {                                                                       \
-       hypre_newBoxLoopDeclare(databox1);                                   \
-       hypre_BoxLoopIncK(1,databox1,i1);                                    \
-       hypre_BoxLoopIncK(2,databox2,i2);
+   hypre_BoxLoopDataDeclareK(1,ndim,loop_size,dbox1,start1,stride1);        \
+   hypre_BoxLoopDataDeclareK(2,ndim,loop_size,dbox2,start2,stride2);        \
+   BoxLoopforall3D(hypre_exec_policy, loop_size[0], loop_size[1], loop_size[2], HYPRE_LAMBDA (HYPRE_Int idx, HYPRE_Int idy, HYPRE_Int idz)  \
+   {                                                                        \
+		 hypre_BoxLoopIncK3D(1,databox1,i1);                                \
+		 hypre_BoxLoopIncK3D(2,databox2,i2);
+
 
 #define hypre_newBoxLoop2End(i1, i2) \
     });                              \
     hypre_fence();                   \
 }
 
+//Damodar: 3D loop
 #define hypre_newBoxLoop3Begin(ndim, loop_size,                             \
                                dbox1, start1, stride1, i1,                  \
                                dbox2, start2, stride2, i2,                  \
                                dbox3, start3, stride3, i3)                  \
 {                                                                           \
-   hypre_newBoxLoopInit(ndim,loop_size);                                    \
    hypre_BoxLoopDataDeclareK(1,ndim,loop_size,dbox1,start1,stride1);        \
    hypre_BoxLoopDataDeclareK(2,ndim,loop_size,dbox2,start2,stride2);        \
    hypre_BoxLoopDataDeclareK(3,ndim,loop_size,dbox3,start3,stride3);        \
-   BoxLoopforall(hypre_exec_policy,hypre__tot,HYPRE_LAMBDA (HYPRE_Int idx)  \
+   BoxLoopforall3D(hypre_exec_policy, loop_size[0], loop_size[1], loop_size[2], HYPRE_LAMBDA (HYPRE_Int idx, HYPRE_Int idy, HYPRE_Int idz)  \
    {                                                                        \
-         hypre_newBoxLoopDeclare(databox1);                                 \
-         hypre_BoxLoopIncK(1,databox1,i1);                                  \
-         hypre_BoxLoopIncK(2,databox2,i2);                                  \
-         hypre_BoxLoopIncK(3,databox3,i3);
+		 hypre_BoxLoopIncK3D(1,databox1,i1);                                \
+		 hypre_BoxLoopIncK3D(2,databox2,i2);								\
+		 hypre_BoxLoopIncK3D(3,databox3,i3);
+
 
 
 #define hypre_newBoxLoop3End(i1, i2,i3) \
@@ -989,24 +1036,23 @@ else                                                                  \
     hypre_fence();                      \
 }
 
-#define hypre_newBoxLoop4Begin(ndim, loop_size,                            \
-                               dbox1, start1, stride1, i1,                 \
-                               dbox2, start2, stride2, i2,                 \
-                               dbox3, start3, stride3, i3,                 \
-                               dbox4, start4, stride4, i4)                 \
-{                                                                          \
-   hypre_newBoxLoopInit(ndim,loop_size);                                   \
-   hypre_BoxLoopDataDeclareK(1,ndim,loop_size,dbox1,start1,stride1);       \
-   hypre_BoxLoopDataDeclareK(2,ndim,loop_size,dbox2,start2,stride2);       \
-   hypre_BoxLoopDataDeclareK(3,ndim,loop_size,dbox3,start3,stride3);       \
-   hypre_BoxLoopDataDeclareK(4,ndim,loop_size,dbox4,start4,stride4);       \
-   BoxLoopforall(hypre_exec_policy,hypre__tot,HYPRE_LAMBDA (HYPRE_Int idx) \
-   {                                                                       \
-         hypre_newBoxLoopDeclare(databox1);                                \
-         hypre_BoxLoopIncK(1,databox1,i1);                                 \
-         hypre_BoxLoopIncK(2,databox2,i2);                                 \
-         hypre_BoxLoopIncK(3,databox3,i3);                                 \
-         hypre_BoxLoopIncK(4,databox4,i4);
+//Damodar: 3D loop
+#define hypre_newBoxLoop4Begin(ndim, loop_size,                             \
+                               dbox1, start1, stride1, i1,                  \
+                               dbox2, start2, stride2, i2,                  \
+                               dbox3, start3, stride3, i3,                  \
+                               dbox4, start4, stride4, i4)                  \
+{                                                                           \
+   hypre_BoxLoopDataDeclareK(1,ndim,loop_size,dbox1,start1,stride1);        \
+   hypre_BoxLoopDataDeclareK(2,ndim,loop_size,dbox2,start2,stride2);        \
+   hypre_BoxLoopDataDeclareK(3,ndim,loop_size,dbox3,start3,stride3);        \
+   hypre_BoxLoopDataDeclareK(4,ndim,loop_size,dbox4,start4,stride4);        \
+   BoxLoopforall3D(hypre_exec_policy, loop_size[0], loop_size[1], loop_size[2], HYPRE_LAMBDA (HYPRE_Int idx, HYPRE_Int idy, HYPRE_Int idz)  \
+   {                                                                        \
+		 hypre_BoxLoopIncK3D(1,databox1,i1);                                \
+		 hypre_BoxLoopIncK3D(2,databox2,i2);								\
+		 hypre_BoxLoopIncK3D(3,databox3,i3);								\
+		 hypre_BoxLoopIncK3D(4,databox4,i4);
 
 #define hypre_newBoxLoop4End(i1, i2, i3, i4) \
     });                                      \
@@ -1017,60 +1063,36 @@ else                                                                  \
 hypre_Boxloop databox##k;                                       \
 databox##k.lsize0   = loop_size[0];                             \
 databox##k.strides0 = stride[0];                                \
-databox##k.bstart0  = 0;                                        \
-databox##k.bsize0   = 0;                                        \
 if (ndim > 1)                                                   \
 {                                                               \
    databox##k.lsize1   = loop_size[1];                          \
    databox##k.strides1 = stride[1];                             \
-   databox##k.bstart1  = 0;                                     \
-   databox##k.bsize1   = 0;                                     \
-}                                                               \
-else                                                            \
-{                                                               \
-   databox##k.lsize1   = 1;                                     \
-   databox##k.strides1 = 0;                                     \
-   databox##k.bstart1  = 0;                                     \
-   databox##k.bsize1   = 0;                                     \
 }                                                               \
 if (ndim == 3)                                                  \
 {                                                               \
    databox##k.lsize2   = loop_size[2];                          \
    databox##k.strides2 = stride[2];                             \
-   databox##k.bstart2  = 0;                                     \
-   databox##k.bsize2   = 0;                                     \
-}                                                               \
-else                                                            \
-{                                                               \
-    databox##k.lsize2   = 1;                                    \
-    databox##k.strides2 = 0;                                    \
-    databox##k.bstart2  = 0;                                    \
-    databox##k.bsize2   = 0;                                    \
 }
 
 #define zypre_newBasicBoxLoop1Begin(ndim, loop_size,                        \
                                     stride1, i1)                            \
 {                                                                           \
-    hypre_BasicBoxLoopInit(ndim,loop_size);                                 \
     zypre_BasicBoxLoopDataDeclareK(1,ndim,loop_size,stride1);               \
-    BoxLoopforall(hypre_exec_policy,hypre__tot,HYPRE_LAMBDA (HYPRE_Int idx) \
+    BoxLoopforall3D(hypre_exec_policy, loop_size[0], loop_size[1], loop_size[2], HYPRE_LAMBDA (HYPRE_Int idx, HYPRE_Int idy, HYPRE_Int idz)  \
     {                                                                       \
-        hypre_newBoxLoopDeclare(databox1);                                  \
-        hypre_BoxLoopIncK(1,databox1,i1);                                   \
+    	hypre_BoxLoopIncK3D(1,databox1,i1);                                 \
+
 
 #define zypre_newBasicBoxLoop2Begin(ndim, loop_size,                        \
                                     stride1, i1,                            \
                                     stride2, i2)                            \
 {                                                                           \
-    hypre_BasicBoxLoopInit(ndim,loop_size);                                 \
     zypre_BasicBoxLoopDataDeclareK(1,ndim,loop_size,stride1);               \
     zypre_BasicBoxLoopDataDeclareK(2,ndim,loop_size,stride2);               \
-    BoxLoopforall(hypre_exec_policy,hypre__tot,HYPRE_LAMBDA (HYPRE_Int idx) \
+    BoxLoopforall3D(hypre_exec_policy, loop_size[0], loop_size[1], loop_size[2], HYPRE_LAMBDA (HYPRE_Int idx, HYPRE_Int idy, HYPRE_Int idz)  \
     {                                                                       \
-        hypre_newBoxLoopDeclare(databox1);                                  \
-        hypre_BoxLoopIncK(1,databox1,i1);                                   \
-        hypre_BoxLoopIncK(2,databox2,i2);                                   \
-
+    	hypre_BoxLoopIncK3D(1,databox1,i1);                                 \
+    	hypre_BoxLoopIncK3D(2,databox2,i2);                                 \
 
 #define hypre_LoopBegin(size,idx)                                    \
 {                                                                    \
@@ -3154,6 +3176,10 @@ typedef struct hypre_StructStencil_struct
 #ifndef hypre_COMMUNICATION_HEADER
 #define hypre_COMMUNICATION_HEADER
 
+//Damodar: allocate permanent buff for every comm package at the begining. Reuse same for every comm.
+//saves repeated malloc, free and pointer manipulations for every call.
+//more importantly allows allocation of gpu buffs and creating permanent pointers.
+//#define PERMANENT_BUFF
 /*--------------------------------------------------------------------------
  * hypre_CommInfo:
  *
@@ -3263,6 +3289,24 @@ typedef struct hypre_CommPkg_struct
    hypre_Index       identity_dir;
    HYPRE_Int        *identity_order;
 
+//#ifdef PERMANENT_BUFF
+   //copied from hypre_CommHandle. if this is enabled, just copy values from comm package
+   //to hypre_CommHandle to maintain backward compatibility.
+
+   hypre_MPI_Request  	*requests;
+   hypre_MPI_Status   	*status;
+
+   HYPRE_Complex 		**send_buffers;
+   HYPRE_Complex		**recv_buffers;
+
+   HYPRE_Complex      	**send_buffers_data;
+   HYPRE_Complex      	**recv_buffers_data;
+
+   HYPRE_Int 			adjust_size;	//used to count adjustment as per CommType "size" change. Needs to be done only twice - for first and for second comm.
+   char 				*device_send_metadata, *device_recv_metadata;
+//#endif
+
+
 } hypre_CommPkg;
 
 /*--------------------------------------------------------------------------
@@ -3379,6 +3423,19 @@ typedef struct hypre_CommHandle_struct
 #define hypre_CommPkgIdentityDir(comm_pkg)     (comm_pkg -> identity_dir)
 #define hypre_CommPkgIdentityOrder(comm_pkg)   (comm_pkg -> identity_order)
 
+
+//#ifdef PERMANENT_BUFF
+#define hypre_CommPkgRequests(comm_pkg)    (comm_pkg -> requests)
+#define hypre_CommPkgStatus(comm_pkg)      (comm_pkg -> status)
+#define hypre_CommPkgSendBuffers(comm_pkg) (comm_pkg -> send_buffers)
+#define hypre_CommPkgRecvBuffers(comm_pkg) (comm_pkg -> recv_buffers)
+#define hypre_CommPkgSendBuffersDevice(comm_pkg)    (comm_pkg -> send_buffers_data)
+#define hypre_CommPkgRecvBuffersDevice(comm_pkg)    (comm_pkg -> recv_buffers_data)
+#define hypre_CommPkgAdjustSize(comm_pkg)    (comm_pkg -> adjust_size)
+#define hypre_CommPkgDeviceSendMetadata(comm_pkg)    (comm_pkg -> device_send_metadata)
+#define hypre_CommPkgDeviceRecvMetadata(comm_pkg)    (comm_pkg -> device_recv_metadata)
+//#endif
+
 /*--------------------------------------------------------------------------
  * Accessor macros: hypre_CommHandle
  *--------------------------------------------------------------------------*/
diff --git a/src/struct_mv/boxloop_cuda.h b/src/struct_mv/boxloop_cuda.h
index 93b8a4502..797977ee1 100644
--- a/src/struct_mv/boxloop_cuda.h
+++ b/src/struct_mv/boxloop_cuda.h
@@ -31,13 +31,20 @@
 
 #define HYPRE_LAMBDA [=] __host__  __device__
 #define BLOCKSIZE 512
+/*#define CUDA_CALL( call )               \
+{                                       \
+	if ( cudaSuccess != call ){         \
+		printf("custom CUDA Error at %s %d: %s %s\n", __FILE__, __LINE__,cudaGetErrorName( call ),  cudaGetErrorString( call ) );  \
+		exit(1);						\
+	}									\
+}*/
 
 typedef struct hypre_Boxloop_struct
 {
-   HYPRE_Int lsize0,lsize1,lsize2;
-   HYPRE_Int strides0,strides1,strides2;
-   HYPRE_Int bstart0,bstart1,bstart2;
-   HYPRE_Int bsize0,bsize1,bsize2;
+   HYPRE_Int lsize0{1},lsize1{1},lsize2{1};
+   HYPRE_Int strides0{0},strides1{0},strides2{0};
+   HYPRE_Int bstart0{0},bstart1{0},bstart2{0};
+   HYPRE_Int bsize0{1},bsize1{1},bsize2{1};
 } hypre_Boxloop;
 
 #if 1
@@ -60,6 +67,51 @@ typedef struct hypre_Boxloop_struct
 
 extern "C++" {
 
+extern int ___cuda_threads_x, ___cuda_threads_y, ___cuda_threads_z;	//Damodar: 3D loop
+
+template <typename LOOP_BODY>
+__global__ void forall_kernel3d(LOOP_BODY loop_body, HYPRE_Int lengthx, HYPRE_Int lengthy, HYPRE_Int lengthz)	//Damodar: 3D loop
+{
+   HYPRE_Int idx = blockDim.x * blockIdx.x + threadIdx.x;
+   HYPRE_Int idy = blockDim.y * blockIdx.y + threadIdx.y;
+   HYPRE_Int idz = blockDim.z * blockIdx.z + threadIdx.z;
+   if(idx < lengthx && idy < lengthy && idz < lengthz)
+	   loop_body(idx, idy, idz);
+}
+
+template<typename LOOP_BODY>
+void BoxLoopforall3D(HYPRE_Int policy, HYPRE_Int lengthx, HYPRE_Int lengthy, HYPRE_Int lengthz, LOOP_BODY loop_body)	//Damodar: 3D loop
+{
+	 if(lengthx*lengthy*lengthz == 0)
+		return;
+   if (policy == HYPRE_MEMORY_HOST)
+   {
+#ifdef HYPRE_USING_OPENMP
+#pragma omp parallel for collapse(3) HYPRE_SMP_SCHEDULE
+#endif
+	  for (HYPRE_Int idz = 0; idz < lengthz; idz++)
+	  for (HYPRE_Int idy = 0; idy < lengthy; idy++)
+      for (HYPRE_Int idx = 0; idx < lengthx; idx++)
+      {
+         loop_body(idx, idy, idz);
+      }
+   }
+   else if (policy == HYPRE_MEMORY_DEVICE)
+   {
+      dim3 blocks((lengthx+___cuda_threads_x-1)/___cuda_threads_x, (lengthy+___cuda_threads_y-1)/___cuda_threads_y, (lengthz+___cuda_threads_z-1)/___cuda_threads_z), threads(___cuda_threads_x, ___cuda_threads_y, ___cuda_threads_z);
+      blocks.x = blocks.x < 1 ? 1 : blocks.x;	//set length to at least 1
+      blocks.y = blocks.y < 1 ? 1 : blocks.y;
+      blocks.z = blocks.z < 1 ? 1 : blocks.z;
+
+      forall_kernel3d<<<blocks, threads>>>(loop_body, lengthx, lengthy, lengthz);
+      //CUDA_CALL(cudaDeviceSynchronize());
+   }
+   else if (policy == 2)
+   {
+   }
+}
+
+
 template <typename LOOP_BODY>
 __global__ void forall_kernel(LOOP_BODY loop_body, HYPRE_Int length)
 {
@@ -91,6 +143,7 @@ void BoxLoopforall(HYPRE_Int policy, HYPRE_Int length, LOOP_BODY loop_body)
          gridSize = 1;
       }
       forall_kernel<<<gridSize, BLOCKSIZE>>>(loop_body, length);
+      //CUDA_CALL(cudaDeviceSynchronize());
    }
    else if (policy == 2)
    {
@@ -126,21 +179,27 @@ void ReductionBoxLoopforall(HYPRE_Int policy, HYPRE_Int length, LOOP_BODY Reduct
                    length, BLOCKSIZE, gridSize);
       */
       reductionforall_kernel<<<gridSize, BLOCKSIZE>>>(ReductionLoop, length);
+      //CUDA_CALL(cudaDeviceSynchronize());
    }
 }
 
 }
 
-
-#define hypre_BoxLoopIncK(k,box,hypre__i)                                               \
-   HYPRE_Int hypre_boxD##k = 1;                                                         \
-   HYPRE_Int hypre__i = 0;                                                              \
-   hypre__i += (hypre_IndexD(local_idx, 0)*box.strides0 + box.bstart0) * hypre_boxD##k; \
-   hypre_boxD##k *= hypre_max(0, box.bsize0 + 1);                                       \
-   hypre__i += (hypre_IndexD(local_idx, 1)*box.strides1 + box.bstart1) * hypre_boxD##k; \
-   hypre_boxD##k *= hypre_max(0, box.bsize1 + 1);                                       \
-   hypre__i += (hypre_IndexD(local_idx, 2)*box.strides2 + box.bstart2) * hypre_boxD##k; \
-   hypre_boxD##k *= hypre_max(0, box.bsize2 + 1);
+//Damodar: 3D loop. No need to call hypre_newBoxLoopDeclare and use local_idx. Directly using 3d indexes from cuda
+//also simplified index calc by eliminating hypre_boxD##k and hypermax(bsize, 1) etc.
+#define hypre_BoxLoopIncK3D(k,box,hypre__i)             \
+   HYPRE_Int hypre__i = 		                        \
+   + (idx*box.strides0 + box.bstart0) * 1 	  			\
+   + (idy*box.strides1 + box.bstart1) * box.bsize1	 	\
+   + (idz*box.strides2 + box.bstart2) * box.bsize2;
+
+//Damodar: also simplified index calc by eliminating hypre_boxD##k and hypermax(bsize, 1) etc.
+//those calculation shifted to hypre_BoxLoopDataDeclareK outside parallel loop.
+#define hypre_BoxLoopIncK(k,box,hypre__i)                                   \
+   HYPRE_Int hypre__i =                                                     \
+   + (hypre_IndexD(local_idx, 0)*box.strides0 + box.bstart0) * 1 			\
+   + (hypre_IndexD(local_idx, 1)*box.strides1 + box.bstart1) * box.bsize1 	\
+   + (hypre_IndexD(local_idx, 2)*box.strides2 + box.bstart2) * box.bsize2;
 
 #define hypre_newBoxLoopInit(ndim,loop_size)            \
   HYPRE_Int hypre__tot = 1;                             \
@@ -161,10 +220,11 @@ void ReductionBoxLoopforall(HYPRE_Int policy, HYPRE_Int length, LOOP_BODY Reduct
   idx_local = idx_local / box.lsize1;                   \
   hypre_IndexD(local_idx, 2)  = idx_local % box.lsize2; \
 
-#define hypre_newBoxLoop0Begin(ndim, loop_size)                            \
-{                                                                          \
-   hypre_newBoxLoopInit(ndim,loop_size);                                   \
-   BoxLoopforall(hypre_exec_policy,hypre__tot,HYPRE_LAMBDA (HYPRE_Int idx) \
+//Damodar: 3D loop
+#define hypre_newBoxLoop0Begin(ndim, loop_size)                  \
+{                                                                \
+   hypre_BoxLoopDataDeclareK(1,ndim,loop_size,dbox1,start1,stride1);        \
+   BoxLoopforall3D(hypre_exec_policy, loop_size[0], loop_size[1], loop_size[2], HYPRE_LAMBDA (HYPRE_Int idx, HYPRE_Int idy, HYPRE_Int idz)  \
    {
 
 #define hypre_newBoxLoop0End() \
@@ -177,84 +237,71 @@ hypre_Boxloop databox##k;                                             \
 databox##k.lsize0 = loop_size[0];                                     \
 databox##k.strides0 = stride[0];                                      \
 databox##k.bstart0  = start[0] - dbox->imin[0];                       \
-databox##k.bsize0   = dbox->imax[0]-dbox->imin[0];                    \
+databox##k.bsize0   = 1;				  \
 if (ndim > 1)                                                         \
 {                                                                     \
    databox##k.lsize1 = loop_size[1];                                  \
    databox##k.strides1 = stride[1];                                   \
    databox##k.bstart1  = start[1] - dbox->imin[1];                    \
-   databox##k.bsize1   = dbox->imax[1]-dbox->imin[1];                 \
-}                                                                     \
-else                                                                  \
-{                                                                     \
-   databox##k.lsize1 = 1;                                             \
-   databox##k.strides1 = 0;                                           \
-   databox##k.bstart1  = 0;                                           \
-   databox##k.bsize1   = 0;                                           \
+   databox##k.bsize1   = dbox->imax[0]-dbox->imin[0] + 1;  /*note imax[0] and NOT imax[1]*/            \
+   databox##k.bsize1   = hypre_max(0, databox##k.bsize1) * databox##k.bsize0;			  \
 }                                                                     \
 if (ndim == 3)                                                        \
 {                                                                     \
    databox##k.lsize2 = loop_size[2];                                  \
    databox##k.strides2 = stride[2];                                   \
    databox##k.bstart2  = start[2] - dbox->imin[2];                    \
-   databox##k.bsize2   = dbox->imax[2]-dbox->imin[2];                 \
-}                                                                     \
-else                                                                  \
-{                                                                     \
-   databox##k.lsize2 = 1;                                             \
-   databox##k.strides2 = 0;                                           \
-   databox##k.bstart2  = 0;                                           \
-   databox##k.bsize2   = 0;                                           \
+   databox##k.bsize2   = dbox->imax[1]-dbox->imin[1] + 1;  /*note imax[1] and NOT imax[2]*/           \
+   databox##k.bsize2   = hypre_max(0, databox##k.bsize2) * databox##k.bsize1;			  \
 }
 
+//Damodar: 3D loop
 #define hypre_newBoxLoop1Begin(ndim, loop_size,                             \
                                dbox1, start1, stride1, i1)                  \
 {                                                                           \
-    hypre_newBoxLoopInit(ndim,loop_size);                                   \
-    hypre_BoxLoopDataDeclareK(1,ndim,loop_size,dbox1,start1,stride1);       \
-    BoxLoopforall(hypre_exec_policy,hypre__tot,HYPRE_LAMBDA (HYPRE_Int idx) \
-    {                                                                       \
-      hypre_newBoxLoopDeclare(databox1);                                    \
-      hypre_BoxLoopIncK(1,databox1,i1);
+   hypre_BoxLoopDataDeclareK(1,ndim,loop_size,dbox1,start1,stride1);        \
+   BoxLoopforall3D(hypre_exec_policy, loop_size[0], loop_size[1], loop_size[2], HYPRE_LAMBDA (HYPRE_Int idx, HYPRE_Int idy, HYPRE_Int idz)  \
+   {                                                                        \
+		 hypre_BoxLoopIncK3D(1,databox1,i1);
 
 #define hypre_newBoxLoop1End(i1) \
     });                          \
     hypre_fence();               \
 }
 
+//Damodar: 3D loop
 #define hypre_newBoxLoop2Begin(ndim, loop_size,                             \
                                dbox1, start1, stride1, i1,                  \
                                dbox2, start2, stride2, i2)                  \
 {                                                                           \
-    hypre_newBoxLoopInit(ndim,loop_size);                                   \
-    hypre_BoxLoopDataDeclareK(1,ndim,loop_size,dbox1,start1,stride1);       \
-    hypre_BoxLoopDataDeclareK(2,ndim,loop_size,dbox2,start2,stride2);       \
-    BoxLoopforall(hypre_exec_policy,hypre__tot,HYPRE_LAMBDA (HYPRE_Int idx) \
-    {                                                                       \
-       hypre_newBoxLoopDeclare(databox1);                                   \
-       hypre_BoxLoopIncK(1,databox1,i1);                                    \
-       hypre_BoxLoopIncK(2,databox2,i2);
+   hypre_BoxLoopDataDeclareK(1,ndim,loop_size,dbox1,start1,stride1);        \
+   hypre_BoxLoopDataDeclareK(2,ndim,loop_size,dbox2,start2,stride2);        \
+   BoxLoopforall3D(hypre_exec_policy, loop_size[0], loop_size[1], loop_size[2], HYPRE_LAMBDA (HYPRE_Int idx, HYPRE_Int idy, HYPRE_Int idz)  \
+   {                                                                        \
+		 hypre_BoxLoopIncK3D(1,databox1,i1);                                \
+		 hypre_BoxLoopIncK3D(2,databox2,i2);
+
 
 #define hypre_newBoxLoop2End(i1, i2) \
     });                              \
     hypre_fence();                   \
 }
 
+//Damodar: 3D loop
 #define hypre_newBoxLoop3Begin(ndim, loop_size,                             \
                                dbox1, start1, stride1, i1,                  \
                                dbox2, start2, stride2, i2,                  \
                                dbox3, start3, stride3, i3)                  \
 {                                                                           \
-   hypre_newBoxLoopInit(ndim,loop_size);                                    \
    hypre_BoxLoopDataDeclareK(1,ndim,loop_size,dbox1,start1,stride1);        \
    hypre_BoxLoopDataDeclareK(2,ndim,loop_size,dbox2,start2,stride2);        \
    hypre_BoxLoopDataDeclareK(3,ndim,loop_size,dbox3,start3,stride3);        \
-   BoxLoopforall(hypre_exec_policy,hypre__tot,HYPRE_LAMBDA (HYPRE_Int idx)  \
+   BoxLoopforall3D(hypre_exec_policy, loop_size[0], loop_size[1], loop_size[2], HYPRE_LAMBDA (HYPRE_Int idx, HYPRE_Int idy, HYPRE_Int idz)  \
    {                                                                        \
-         hypre_newBoxLoopDeclare(databox1);                                 \
-         hypre_BoxLoopIncK(1,databox1,i1);                                  \
-         hypre_BoxLoopIncK(2,databox2,i2);                                  \
-         hypre_BoxLoopIncK(3,databox3,i3);
+		 hypre_BoxLoopIncK3D(1,databox1,i1);                                \
+		 hypre_BoxLoopIncK3D(2,databox2,i2);								\
+		 hypre_BoxLoopIncK3D(3,databox3,i3);
+
 
 
 #define hypre_newBoxLoop3End(i1, i2,i3) \
@@ -262,24 +309,23 @@ else                                                                  \
     hypre_fence();                      \
 }
 
-#define hypre_newBoxLoop4Begin(ndim, loop_size,                            \
-                               dbox1, start1, stride1, i1,                 \
-                               dbox2, start2, stride2, i2,                 \
-                               dbox3, start3, stride3, i3,                 \
-                               dbox4, start4, stride4, i4)                 \
-{                                                                          \
-   hypre_newBoxLoopInit(ndim,loop_size);                                   \
-   hypre_BoxLoopDataDeclareK(1,ndim,loop_size,dbox1,start1,stride1);       \
-   hypre_BoxLoopDataDeclareK(2,ndim,loop_size,dbox2,start2,stride2);       \
-   hypre_BoxLoopDataDeclareK(3,ndim,loop_size,dbox3,start3,stride3);       \
-   hypre_BoxLoopDataDeclareK(4,ndim,loop_size,dbox4,start4,stride4);       \
-   BoxLoopforall(hypre_exec_policy,hypre__tot,HYPRE_LAMBDA (HYPRE_Int idx) \
-   {                                                                       \
-         hypre_newBoxLoopDeclare(databox1);                                \
-         hypre_BoxLoopIncK(1,databox1,i1);                                 \
-         hypre_BoxLoopIncK(2,databox2,i2);                                 \
-         hypre_BoxLoopIncK(3,databox3,i3);                                 \
-         hypre_BoxLoopIncK(4,databox4,i4);
+//Damodar: 3D loop
+#define hypre_newBoxLoop4Begin(ndim, loop_size,                             \
+                               dbox1, start1, stride1, i1,                  \
+                               dbox2, start2, stride2, i2,                  \
+                               dbox3, start3, stride3, i3,                  \
+                               dbox4, start4, stride4, i4)                  \
+{                                                                           \
+   hypre_BoxLoopDataDeclareK(1,ndim,loop_size,dbox1,start1,stride1);        \
+   hypre_BoxLoopDataDeclareK(2,ndim,loop_size,dbox2,start2,stride2);        \
+   hypre_BoxLoopDataDeclareK(3,ndim,loop_size,dbox3,start3,stride3);        \
+   hypre_BoxLoopDataDeclareK(4,ndim,loop_size,dbox4,start4,stride4);        \
+   BoxLoopforall3D(hypre_exec_policy, loop_size[0], loop_size[1], loop_size[2], HYPRE_LAMBDA (HYPRE_Int idx, HYPRE_Int idy, HYPRE_Int idz)  \
+   {                                                                        \
+		 hypre_BoxLoopIncK3D(1,databox1,i1);                                \
+		 hypre_BoxLoopIncK3D(2,databox2,i2);								\
+		 hypre_BoxLoopIncK3D(3,databox3,i3);								\
+		 hypre_BoxLoopIncK3D(4,databox4,i4);
 
 #define hypre_newBoxLoop4End(i1, i2, i3, i4) \
     });                                      \
@@ -290,60 +336,36 @@ else                                                                  \
 hypre_Boxloop databox##k;                                       \
 databox##k.lsize0   = loop_size[0];                             \
 databox##k.strides0 = stride[0];                                \
-databox##k.bstart0  = 0;                                        \
-databox##k.bsize0   = 0;                                        \
 if (ndim > 1)                                                   \
 {                                                               \
    databox##k.lsize1   = loop_size[1];                          \
    databox##k.strides1 = stride[1];                             \
-   databox##k.bstart1  = 0;                                     \
-   databox##k.bsize1   = 0;                                     \
-}                                                               \
-else                                                            \
-{                                                               \
-   databox##k.lsize1   = 1;                                     \
-   databox##k.strides1 = 0;                                     \
-   databox##k.bstart1  = 0;                                     \
-   databox##k.bsize1   = 0;                                     \
 }                                                               \
 if (ndim == 3)                                                  \
 {                                                               \
    databox##k.lsize2   = loop_size[2];                          \
    databox##k.strides2 = stride[2];                             \
-   databox##k.bstart2  = 0;                                     \
-   databox##k.bsize2   = 0;                                     \
-}                                                               \
-else                                                            \
-{                                                               \
-    databox##k.lsize2   = 1;                                    \
-    databox##k.strides2 = 0;                                    \
-    databox##k.bstart2  = 0;                                    \
-    databox##k.bsize2   = 0;                                    \
 }
 
 #define zypre_newBasicBoxLoop1Begin(ndim, loop_size,                        \
                                     stride1, i1)                            \
 {                                                                           \
-    hypre_BasicBoxLoopInit(ndim,loop_size);                                 \
     zypre_BasicBoxLoopDataDeclareK(1,ndim,loop_size,stride1);               \
-    BoxLoopforall(hypre_exec_policy,hypre__tot,HYPRE_LAMBDA (HYPRE_Int idx) \
+    BoxLoopforall3D(hypre_exec_policy, loop_size[0], loop_size[1], loop_size[2], HYPRE_LAMBDA (HYPRE_Int idx, HYPRE_Int idy, HYPRE_Int idz)  \
     {                                                                       \
-        hypre_newBoxLoopDeclare(databox1);                                  \
-        hypre_BoxLoopIncK(1,databox1,i1);                                   \
+    	hypre_BoxLoopIncK3D(1,databox1,i1);                                 \
+
 
 #define zypre_newBasicBoxLoop2Begin(ndim, loop_size,                        \
                                     stride1, i1,                            \
                                     stride2, i2)                            \
 {                                                                           \
-    hypre_BasicBoxLoopInit(ndim,loop_size);                                 \
     zypre_BasicBoxLoopDataDeclareK(1,ndim,loop_size,stride1);               \
     zypre_BasicBoxLoopDataDeclareK(2,ndim,loop_size,stride2);               \
-    BoxLoopforall(hypre_exec_policy,hypre__tot,HYPRE_LAMBDA (HYPRE_Int idx) \
+    BoxLoopforall3D(hypre_exec_policy, loop_size[0], loop_size[1], loop_size[2], HYPRE_LAMBDA (HYPRE_Int idx, HYPRE_Int idy, HYPRE_Int idz)  \
     {                                                                       \
-        hypre_newBoxLoopDeclare(databox1);                                  \
-        hypre_BoxLoopIncK(1,databox1,i1);                                   \
-        hypre_BoxLoopIncK(2,databox2,i2);                                   \
-
+    	hypre_BoxLoopIncK3D(1,databox1,i1);                                 \
+    	hypre_BoxLoopIncK3D(2,databox2,i2);                                 \
 
 #define hypre_LoopBegin(size,idx)                                    \
 {                                                                    \
diff --git a/src/struct_mv/struct_communication.c b/src/struct_mv/struct_communication.c
index 6851db751..006796e3f 100644
--- a/src/struct_mv/struct_communication.c
+++ b/src/struct_mv/struct_communication.c
@@ -13,6 +13,32 @@
 #include "_hypre_struct_mv.h"
 
 #define DEBUG 0
+#define MERGE_COMM_KERNELS
+#define PERMANENT_BUFF
+
+extern int cuda_aware_mpi;
+
+#ifdef MERGE_COMM_KERNELS
+
+#ifndef PERMANENT_BUFF
+#error "define PERMANENT_BUFF for using MERGE_COMM_KERNELS"
+#endif
+
+#include <vector>
+#define CUDA_CALL( call )               \
+{                                       \
+	if ( cudaSuccess != call ){         \
+		printf("custom CUDA Error at %s %d: %s %s\n", __FILE__, __LINE__,cudaGetErrorName( call ),  cudaGetErrorString( call ) );  \
+		exit(1);						\
+	}									\
+}
+
+/*#define CONST_MEM_SIZE 32768
+
+__constant__ char const_buff[CONST_MEM_SIZE];
+int g_mem_offset=0;*/
+
+#endif
 
 #if DEBUG
 char       filename[255];
@@ -442,6 +468,94 @@ hypre_CommPkgCreate( hypre_CommInfo   *comm_info,
       }
    }
 
+
+
+//damodar: allocate buffs and store in comm pckg itself. These can be reused later.
+
+#ifdef PERMANENT_BUFF
+   /*--------------------------------------------------------------------
+    * allocate requests and status
+    *--------------------------------------------------------------------*/
+   HYPRE_Int            num_sends  = hypre_CommPkgNumSends(comm_pkg);
+   HYPRE_Int            num_recvs  = hypre_CommPkgNumRecvs(comm_pkg);
+
+   HYPRE_Int            num_requests;
+   hypre_MPI_Request   *requests;
+   hypre_MPI_Status    *status;
+   HYPRE_Complex      **send_buffers;
+   HYPRE_Complex      **recv_buffers;
+
+   HYPRE_Complex      **send_buffers_data;
+   HYPRE_Complex      **recv_buffers_data;
+
+   /* Prepare send buffers: allocate device buffer */
+   HYPRE_Int alloc_dev_buffer = 0;
+   /* In the case of running on device and cannot access host memory from device */
+#if (defined(HYPRE_USING_CUDA) || defined(HYPRE_USING_DEVICE_OPENMP)) && (HYPRE_MEMORY_HOST_ACT != HYPRE_MEMORY_SHARED)
+#if defined(HYPRE_USING_RAJA) || defined(HYPRE_USING_KOKKOS)
+   alloc_dev_buffer = 1;
+#elif defined(HYPRE_USING_CUDA)
+   alloc_dev_buffer = (hypre_exec_policy == HYPRE_MEMORY_DEVICE);
+#elif defined(HYPRE_USING_DEVICE_OPENMP)
+   alloc_dev_buffer = hypre__global_offload;
+#endif
+#endif
+
+
+   num_requests = num_sends + num_recvs;
+   requests = hypre_CTAlloc(hypre_MPI_Request,  num_requests, HYPRE_MEMORY_HOST);
+   status   = hypre_CTAlloc(hypre_MPI_Status,  num_requests, HYPRE_MEMORY_HOST);
+
+   /*--------------------------------------------------------------------
+    * allocate buffers
+    *--------------------------------------------------------------------*/
+
+   //just allocate send - recv buffs here. Adjust size later in init depending
+   // on whether its a first comm or not. Size adjustment needed only twice -
+   // 1. For first comm including prefix data
+   // 2. For second comm excluding prefix data. It remains same for subsequent comms
+   /* allocate send buffers */
+   send_buffers = hypre_TAlloc(HYPRE_Complex *,  num_sends, HYPRE_MEMORY_HOST);
+   send_buffers_data = hypre_TAlloc(HYPRE_Complex *, num_sends,HYPRE_MEMORY_HOST);
+   if (num_sends > 0)
+   {
+	   size = hypre_CommPkgSendBufsize(comm_pkg);
+	   send_buffers[0] =  hypre_TAlloc(HYPRE_Complex,  size, HYPRE_MEMORY_HOST);
+
+	   send_buffers_data[0] = hypre_CTAlloc(HYPRE_Complex, size, HYPRE_MEMORY_DEVICE);
+
+//	   if(alloc_dev_buffer)
+//		   send_buffers_data[0] = hypre_CTAlloc(HYPRE_Complex, size, HYPRE_MEMORY_DEVICE);
+//	   else
+//		   send_buffers_data[0] = NULL;
+   }
+
+   /* allocate recv buffers */
+   recv_buffers = hypre_TAlloc(HYPRE_Complex *,  num_recvs, HYPRE_MEMORY_HOST);
+   recv_buffers_data = hypre_TAlloc(HYPRE_Complex *, num_recvs,HYPRE_MEMORY_HOST);
+   if (num_recvs > 0)
+   {
+	   size = hypre_CommPkgRecvBufsize(comm_pkg);
+	   recv_buffers[0] =  hypre_TAlloc(HYPRE_Complex,  size, HYPRE_MEMORY_HOST);
+
+	   recv_buffers_data[0] = hypre_CTAlloc(HYPRE_Complex, size, HYPRE_MEMORY_DEVICE);
+
+//	   if(alloc_dev_buffer)
+//		   recv_buffers_data[0] = hypre_CTAlloc(HYPRE_Complex, size, HYPRE_MEMORY_DEVICE);
+//	   else
+//		   recv_buffers_data[0] = NULL;
+   }
+
+   hypre_CommPkgRequests(comm_pkg) = requests;
+   hypre_CommPkgStatus(comm_pkg)   = status;
+   hypre_CommPkgSendBuffers(comm_pkg) = send_buffers;
+   hypre_CommPkgRecvBuffers(comm_pkg) = recv_buffers;
+   hypre_CommPkgSendBuffersDevice(comm_pkg) = send_buffers_data;
+   hypre_CommPkgRecvBuffersDevice(comm_pkg) = recv_buffers_data;
+   hypre_CommPkgAdjustSize(comm_pkg) = 0;
+#endif	//#ifdef PERMANENT_BUFF
+
+
    /*------------------------------------------------------
     * Debugging stuff - ONLY WORKS FOR 3D
     *------------------------------------------------------*/
@@ -764,6 +878,43 @@ hypre_CommTypeSetEntry( hypre_Box           *box,
    return hypre_error_flag;
 }
 
+
+template <typename LOOP_BODY>
+__global__ void kernel_3d_no_condition(LOOP_BODY loop_body)
+{
+   HYPRE_Int idx = blockDim.x * blockIdx.x + threadIdx.x;
+   HYPRE_Int idy = blockDim.y * blockIdx.y + threadIdx.y;
+   HYPRE_Int idz = blockDim.z * blockIdx.z + threadIdx.z;
+   loop_body(idx, idy, idz);
+}
+
+template<typename LOOP_BODY>
+void BoxLoopforall3D_custom(HYPRE_Int policy, HYPRE_Int lengthx, HYPRE_Int lengthy, HYPRE_Int lengthz, LOOP_BODY loop_body)
+{
+   if (policy == HYPRE_MEMORY_HOST)
+   {
+#ifdef HYPRE_USING_OPENMP
+#pragma omp parallel for collapse(3) HYPRE_SMP_SCHEDULE
+#endif
+	  for (HYPRE_Int idz = 0; idz < lengthz; idz++)
+	  for (HYPRE_Int idy = 0; idy < lengthy; idy++)
+      for (HYPRE_Int idx = 0; idx < lengthx; idx++)
+      {
+         loop_body(idx, idy, idz);
+      }
+   }
+   else if (policy == HYPRE_MEMORY_DEVICE)
+   {
+      dim3 blocks((lengthx+31)/32, (lengthy+3)/4, (lengthz+3)/4), threads(32, 4, 4);
+      kernel_3d_no_condition<<<blocks, threads>>>(loop_body);
+   }
+   else if (policy == 2)
+   {
+   }
+}
+
+
+
 /*--------------------------------------------------------------------------
  * Initialize a non-blocking communication exchange.
  *
@@ -813,6 +964,66 @@ hypre_InitializeCommunication( hypre_CommPkg     *comm_pkg,
 
    HYPRE_Int            i, j, d, ll;
    HYPRE_Int            size;
+   HYPRE_Int my_proc;
+   hypre_MPI_Comm_rank(comm, &my_proc );
+
+
+
+
+   /* Prepare send buffers: allocate device buffer */
+   HYPRE_Int alloc_dev_buffer = 0;
+   /* In the case of running on device and cannot access host memory from device */
+#if (defined(HYPRE_USING_CUDA) || defined(HYPRE_USING_DEVICE_OPENMP)) && (HYPRE_MEMORY_HOST_ACT != HYPRE_MEMORY_SHARED)
+#if defined(HYPRE_USING_RAJA) || defined(HYPRE_USING_KOKKOS)
+   alloc_dev_buffer = 1;
+#elif defined(HYPRE_USING_CUDA)
+   alloc_dev_buffer = (hypre_exec_policy == HYPRE_MEMORY_DEVICE);
+#elif defined(HYPRE_USING_DEVICE_OPENMP)
+   alloc_dev_buffer = hypre__global_offload;
+#endif
+#endif
+
+
+#ifdef PERMANENT_BUFF
+   //copy pointers from comm package to maintain backward compatibility.
+   num_requests = num_sends + num_recvs;
+   requests = hypre_CommPkgRequests(comm_pkg);
+   status   =   hypre_CommPkgStatus(comm_pkg);
+   send_buffers = hypre_CommPkgSendBuffers(comm_pkg);
+   recv_buffers = hypre_CommPkgRecvBuffers(comm_pkg);
+   send_buffers_data = hypre_CommPkgSendBuffersDevice(comm_pkg);
+   recv_buffers_data = hypre_CommPkgRecvBuffersDevice(comm_pkg);
+
+   //Adjust size later on whether its a first comm or not. Size adjustment needed only twice -
+  // 1. For first comm including prefix data
+  // 2. For second comm excluding prefix data. It remains same for subsequent comms
+   if(hypre_CommPkgAdjustSize(comm_pkg) < 2)
+   {
+	   for (i = 1; i < num_sends; i++)
+	   {
+		   comm_type = hypre_CommPkgSendType(comm_pkg, i-1);
+		   size = hypre_CommTypeBufsize(comm_type);
+		   send_buffers[i] = send_buffers[i-1] + size;
+		   send_buffers_data[i] = send_buffers_data[i-1] + size;	//when device is not used, send_buffers_data[0] will be null. send_buffers_data[1] onwards will be set to invalid value, but will be overwritten later. So should not be a problem
+	   }
+
+	   for (i = 1; i < num_recvs; i++)
+	   {
+		   comm_type = hypre_CommPkgRecvType(comm_pkg, i-1);
+		   size = hypre_CommTypeBufsize(comm_type);
+		   recv_buffers[i] = recv_buffers[i-1] + size;
+		   recv_buffers_data[i] = recv_buffers_data[i-1] + size;
+	   }
+   }
+
+   if (!alloc_dev_buffer)
+   {
+	   send_buffers_data = send_buffers;
+	   recv_buffers_data = recv_buffers;
+   }
+
+
+#else	//#ifdef PERMANENT_BUFF
 
    /*--------------------------------------------------------------------
     * allocate requests and status
@@ -840,19 +1051,6 @@ hypre_InitializeCommunication( hypre_CommPkg     *comm_pkg,
       }
    }
 
-   /* Prepare send buffers: allocate device buffer */
-   HYPRE_Int alloc_dev_buffer = 0;
-   /* In the case of running on device and cannot access host memory from device */
-#if (defined(HYPRE_USING_CUDA) || defined(HYPRE_USING_DEVICE_OPENMP)) && (HYPRE_MEMORY_HOST_ACT != HYPRE_MEMORY_SHARED)
-#if defined(HYPRE_USING_RAJA) || defined(HYPRE_USING_KOKKOS)
-   alloc_dev_buffer = 1;
-#elif defined(HYPRE_USING_CUDA)
-   alloc_dev_buffer = (hypre_exec_policy == HYPRE_MEMORY_DEVICE);
-#elif defined(HYPRE_USING_DEVICE_OPENMP)
-   alloc_dev_buffer = hypre__global_offload;
-#endif
-#endif
-
    if (alloc_dev_buffer)
    {
       send_buffers_data = hypre_TAlloc(HYPRE_Complex *, num_sends,HYPRE_MEMORY_HOST);
@@ -926,10 +1124,15 @@ hypre_InitializeCommunication( hypre_CommPkg     *comm_pkg,
    {
       recv_buffers_data = recv_buffers;
    }
+#endif	//#ifdef PERMANENT_BUFF
 
    /*--------------------------------------------------------------------
     * pack send buffers
     *--------------------------------------------------------------------*/
+#if defined( MERGE_COMM_KERNELS ) && defined( HYPRE_USING_CUDA )
+	std::vector<unsigned int> dptr_h_array, kptr_h_array, length_h_array, stride_h_array, unit_stride_h_array;
+	unsigned int maxx=0, maxy=0, maxz=0, num_arrays=0;
+#endif
 
    for (i = 0; i < num_sends; i++)
    {
@@ -949,48 +1152,145 @@ hypre_InitializeCommunication( hypre_CommPkg     *comm_pkg,
          stride_array = hypre_CommEntryTypeStrideArray(comm_entry);
          order = hypre_CommEntryTypeOrder(comm_entry);
          unitst_array[0] = 1;
-         for (d = 1; d <= ndim; d++)
-         {
+         for (d = 1; d <= ndim; d++){
             unitst_array[d] = unitst_array[d-1]*length_array[d-1];
          }
+		 size = unitst_array[ndim];
 
          lptr = send_data + hypre_CommEntryTypeOffset(comm_entry);
+
          for (ll = 0; ll < num_values; ll++)
          {
-            if (order[ll] > -1)
-            {
-               kptr = lptr + order[ll]*stride_array[ndim];
-	       
+
+        	 if (order[ll] > -1)
+        	 {
+        		 kptr = lptr + order[ll]*stride_array[ndim];
+
+#if defined( MERGE_COMM_KERNELS ) && defined( HYPRE_USING_CUDA )
+        		 if(hypre_exec_policy == HYPRE_MEMORY_DEVICE){
+        			 num_arrays++;
+        			 maxx = (maxx < length_array[0]) ? length_array[0] : maxx;
+        			 maxy = (maxy < length_array[1]) ? length_array[1] : maxy;
+        			 maxz = (maxz < length_array[2]) ? length_array[2] : maxz;
+        			 if(hypre_CommPkgAdjustSize(comm_pkg) < 2){		//compute these offsets only for first 2 comms. Later offsets and length wont change
+						 dptr_h_array.push_back((unsigned int)(dptr - send_buffers_data[0]));	//push offset from starting point
+						 for (d = 0; d < ndim; d++){
+							 length_h_array.push_back(length_array[d]);
+							 stride_h_array.push_back(stride_array[d]);
+						 }
+
+						 for (d = 0; d <= ndim; d++)
+							 unit_stride_h_array.push_back(unitst_array[d]);
+
+						 kptr_h_array.push_back((unsigned int)(kptr - send_data));	//push offset from starting point
+        			 }
+        		 }
+
+        		 if(hypre_exec_policy != HYPRE_MEMORY_DEVICE)	//this condition is applicable to hypre_BasicBoxLoop2Begin only if  MERGE_COMM_KERNELS is active
+#endif
+        		 {
 #define DEVICE_VAR is_device_ptr(dptr,kptr)
-               hypre_BasicBoxLoop2Begin(ndim, length_array,
-                                        stride_array, ki,
-                                        unitst_array, di);
-               {
-                  dptr[di] = kptr[ki];
-               }
-               hypre_BoxLoop2End(ki, di);
+        			 hypre_BasicBoxLoop2Begin(ndim, length_array,
+        					 stride_array, ki,
+							 unitst_array, di);
+        			 {
+        				 //printf("copy %d %d %lu %lu %d %d\n",my_proc, idx, (unsigned long)(dptr-send_buffer_base), (unsigned long)(kptr-send_data), di, ki);
+        				 dptr[di] = kptr[ki];
+        			 }
+        			 hypre_BoxLoop2End(ki, di);
 #undef DEVICE_VAR
+        		 }
 
-               dptr += unitst_array[ndim];
-            }
-            else
+        	 }
+            else if(hypre_CommPkgAdjustSize(comm_pkg) < 2)	//reset buffers only for first 2 comms. Later buffers and offsets will be reused, so 0s should still remain in buffer. Will be usefull especially on device
             {
-               size = 1;
-               for (d = 0; d < ndim; d++)
-               {
-                  size *= length_array[d];
-               }
-
-               hypre_Memset(dptr, 0, size*sizeof(HYPRE_Complex), HYPRE_MEMORY_DEVICE);
-
-               dptr += size;
+				hypre_Memset(dptr, 0, size*sizeof(HYPRE_Complex), HYPRE_MEMORY_DEVICE);
             }
+
+            dptr += size;
          }
       }
    }
 
+
+
+#if defined( MERGE_COMM_KERNELS ) && defined( HYPRE_USING_CUDA )
+
+	if(num_arrays>0 && hypre_exec_policy == HYPRE_MEMORY_DEVICE){
+
+
+		char *device_metadata = hypre_CommPkgDeviceSendMetadata(comm_pkg);
+
+		if(hypre_CommPkgAdjustSize(comm_pkg) < 2)	//copy these offsets only for first 2 comms. Later offsets and lengths wont change
+		{
+			unsigned int int_array_size = 2*num_arrays /* offsets for dptr and kptr */
+								     + num_arrays*ndim /* length_d_array */
+								     + num_arrays*ndim /* stride_d_array */
+								     + num_arrays*(ndim + 1); /* unit_stride_d_array */
+			unsigned int total_size = (int_array_size*sizeof(unsigned int));
+
+			char *host_buff = (char *)malloc(total_size);
+			unsigned int offset = 0;
+			memcpy(host_buff + offset, dptr_h_array.data(), dptr_h_array.size() * sizeof(unsigned int));
+			offset += dptr_h_array.size() * sizeof(unsigned int);
+			memcpy(host_buff + offset, kptr_h_array.data(), kptr_h_array.size() * sizeof(unsigned int));
+			offset += kptr_h_array.size() * sizeof(unsigned int);
+			memcpy(host_buff + offset, length_h_array.data(), length_h_array.size() * sizeof(unsigned int));
+			offset += length_h_array.size() * sizeof(unsigned int);
+			memcpy(host_buff + offset, stride_h_array.data(), stride_h_array.size() * sizeof(unsigned int));
+			offset += stride_h_array.size() * sizeof(unsigned int);
+			memcpy(host_buff + offset, unit_stride_h_array.data(), unit_stride_h_array.size() * sizeof(unsigned int));
+
+			if(hypre_CommPkgAdjustSize(comm_pkg) == 0){	//allocate buffers during first comm. store them in comm_pkg reuse later.
+				device_metadata = hypre_CTAlloc(char, total_size, HYPRE_MEMORY_DEVICE);
+				hypre_CommPkgDeviceSendMetadata(comm_pkg) = device_metadata ;
+			}
+			CUDA_CALL(cudaMemcpy(device_metadata, host_buff, total_size, cudaMemcpyHostToDevice));
+			free(host_buff);
+		}
+
+		HYPRE_Complex *dptr_d = send_buffers_data[0];	//gpu buffers
+		HYPRE_Complex *kptr_d = send_data;	//send data pointer
+
+
+		BoxLoopforall3D_custom(HYPRE_MEMORY_DEVICE, maxx, maxy, maxz*num_arrays, [=] __device__(int idx, int idy, int idz_combined){
+			int i = idz_combined / maxz;
+			int idz = idz_combined % maxz;
+
+			unsigned int      *dptr_d_array=NULL, *kptr_d_array=NULL, *length_d_array=NULL, *stride_d_array=NULL, *unit_stride_d_array=NULL;
+			dptr_d_array = (unsigned int *) device_metadata;
+			kptr_d_array = dptr_d_array + num_arrays;
+			length_d_array = kptr_d_array + num_arrays;
+			stride_d_array = length_d_array + num_arrays*(ndim);
+			unit_stride_d_array = stride_d_array + num_arrays*(ndim);
+
+			if(i < num_arrays){
+				HYPRE_Complex *dptr = dptr_d + dptr_d_array[i];
+				HYPRE_Complex *kptr = kptr_d + kptr_d_array[i];
+				HYPRE_Int nx = length_d_array[i*(ndim)], ny = length_d_array[i*(ndim) + 1], nz = length_d_array[i*(ndim) + 2];
+				unsigned int *d_stride_array = &stride_d_array[i*(ndim)];
+				unsigned int *unit_stride = &unit_stride_d_array[i*(ndim+1)];
+
+				if(idx < nx && idy < ny && idz < nz){
+					HYPRE_Int di = idx*unit_stride[0] + idy*unit_stride[1] + idz*unit_stride[2];
+					HYPRE_Int ki = idx*d_stride_array[0] + idy*d_stride_array[1] + idz*d_stride_array[2];
+					dptr[di] = kptr[ki];
+				}
+			}
+
+		});
+
+	}
+#endif
+
+	int mpi_through_host = 1;	//default
+	if(cuda_aware_mpi==1 && !hypre_CommPkgFirstComm(comm_pkg))	//directly use cuda buffers if mpi is cuda aware and the comm is not first
+		mpi_through_host = 0;
+
+	HYPRE_Complex** mpi_send_buff=send_buffers, **mpi_recv_buff=recv_buffers;
+
    /* Copy buffer data from Device to Host */
-   if (num_sends > 0 && alloc_dev_buffer)
+   if (num_sends > 0 && alloc_dev_buffer && mpi_through_host==1)
    {
       HYPRE_Complex  *dptr_host;
       size = hypre_CommPkgSendBufsize(comm_pkg);
@@ -999,6 +1299,15 @@ hypre_InitializeCommunication( hypre_CommPkg     *comm_pkg,
       hypre_TMemcpy(dptr_host,dptr,HYPRE_Complex,size,HYPRE_MEMORY_HOST,HYPRE_MEMORY_DEVICE);
    }
 
+
+   if (num_sends > 0 && alloc_dev_buffer && mpi_through_host==0){	//transfer using device buffers
+	   mpi_send_buff = send_buffers_data;
+	   CUDA_CALL(cudaDeviceSynchronize());
+	 }
+
+   if (num_recvs > 0 && alloc_dev_buffer && mpi_through_host==0)	//transfer using device buffers
+	   mpi_recv_buff = recv_buffers_data;
+
    for (i = 0; i < num_sends; i++)
    {
       comm_type = hypre_CommPkgSendType(comm_pkg, i);
@@ -1010,10 +1319,10 @@ hypre_InitializeCommunication( hypre_CommPkg     *comm_pkg,
          qptr = (HYPRE_Int *) send_buffers[i];
          *qptr = num_entries;
          qptr ++;
-         hypre_TMemcpy(qptr,  hypre_CommTypeRemBoxnums(comm_type), 
+         hypre_TMemcpy(qptr,  hypre_CommTypeRemBoxnums(comm_type),
                HYPRE_Int, num_entries, HYPRE_MEMORY_HOST, HYPRE_MEMORY_HOST);
          qptr += num_entries;
-         hypre_TMemcpy(qptr,  hypre_CommTypeRemBoxes(comm_type), 
+         hypre_TMemcpy(qptr,  hypre_CommTypeRemBoxes(comm_type),
                hypre_Box, num_entries, HYPRE_MEMORY_HOST, HYPRE_MEMORY_HOST);
          hypre_CommTypeRemBoxnums(comm_type) = NULL;
          hypre_CommTypeRemBoxes(comm_type)   = NULL;
@@ -1028,7 +1337,9 @@ hypre_InitializeCommunication( hypre_CommPkg     *comm_pkg,
    for(i = 0; i < num_recvs; i++)
    {
       comm_type = hypre_CommPkgRecvType(comm_pkg, i);
-      hypre_MPI_Irecv(recv_buffers[i],
+			if(hypre_CommTypeBufsize(comm_type)<1)
+				printf("0 size recv %d\n", hypre_CommTypeBufsize(comm_type));
+      hypre_MPI_Irecv(mpi_recv_buff[i],
                       hypre_CommTypeBufsize(comm_type)*sizeof(HYPRE_Complex),
                       hypre_MPI_BYTE, hypre_CommTypeProc(comm_type),
                       tag, comm, &requests[j++]);
@@ -1043,7 +1354,9 @@ hypre_InitializeCommunication( hypre_CommPkg     *comm_pkg,
    for(i = 0; i < num_sends; i++)
    {
       comm_type = hypre_CommPkgSendType(comm_pkg, i);
-      hypre_MPI_Isend(send_buffers[i],
+			if(hypre_CommTypeBufsize(comm_type)<1)
+				printf("0 size send %d\n", hypre_CommTypeBufsize(comm_type));
+      hypre_MPI_Isend(mpi_send_buff[i],
                       hypre_CommTypeBufsize(comm_type)*sizeof(HYPRE_Complex),
                       hypre_MPI_BYTE, hypre_CommTypeProc(comm_type),
                       tag, comm, &requests[j++]);
@@ -1054,6 +1367,7 @@ hypre_InitializeCommunication( hypre_CommPkg     *comm_pkg,
          hypre_CommPkgSendBufsize(comm_pkg) -= size;
       }
    }
+	   //CUDA_CALL(cudaDeviceSynchronize());
 
    /*--------------------------------------------------------------------
     * set up CopyToType and exchange local data
@@ -1120,11 +1434,13 @@ hypre_FinalizeCommunication( hypre_CommHandle *comm_handle )
    HYPRE_Complex      **send_buffers = hypre_CommHandleSendBuffers(comm_handle);
    HYPRE_Complex      **recv_buffers = hypre_CommHandleRecvBuffers(comm_handle);
    HYPRE_Int            action       = hypre_CommHandleAction(comm_handle);
+   HYPRE_Complex       *recv_data     = hypre_CommHandleRecvData(comm_handle);
 
    HYPRE_Int            ndim         = hypre_CommPkgNDim(comm_pkg);
    HYPRE_Int            num_values   = hypre_CommPkgNumValues(comm_pkg);
    HYPRE_Int            num_sends    = hypre_CommPkgNumSends(comm_pkg);
    HYPRE_Int            num_recvs    = hypre_CommPkgNumRecvs(comm_pkg);
+   MPI_Comm             comm         = hypre_CommPkgComm(comm_pkg);
 
    hypre_CommType      *comm_type;
    hypre_CommEntryType *comm_entry;
@@ -1140,17 +1456,31 @@ hypre_FinalizeCommunication( hypre_CommHandle *comm_handle )
    HYPRE_Int           *boxnums;
    hypre_Box           *boxes;
 
-   HYPRE_Int            i, j, d, ll;
+   HYPRE_Int            i, j, d, ll, num_arrays=0;
 
    HYPRE_Complex      **send_buffers_data = hypre_CommHandleSendBuffersDevice(comm_handle);
    HYPRE_Complex      **recv_buffers_data = hypre_CommHandleRecvBuffersDevice(comm_handle);
+   HYPRE_Int my_proc;
+   hypre_MPI_Comm_rank(comm, &my_proc );
+
+	  /*size_t free_mem, tot_mem;
+		CUDA_CALL(cudaMemGetInfo(&free_mem, &tot_mem));
+
+		if((double)free_mem / (double) tot_mem < 0.2)
+			printf("%d warning: gpu memory approaching peak: %f / %f (in MBs)\n", my_proc, free_mem/1024.0/1024.0, tot_mem/1024.0/1024.0);
+		*/
+
 
    /*--------------------------------------------------------------------
     * finish communications
     *--------------------------------------------------------------------*/
 
+
+
    if (hypre_CommHandleNumRequests(comm_handle))
    {
+			if(hypre_CommHandleNumRequests(comm_handle)<1)
+				printf("invalid waits %d\n", hypre_CommHandleNumRequests(comm_handle));
       hypre_MPI_Waitall(hypre_CommHandleNumRequests(comm_handle),
                         hypre_CommHandleRequests(comm_handle),
                         hypre_CommHandleStatus(comm_handle));
@@ -1218,7 +1548,11 @@ hypre_FinalizeCommunication( hypre_CommHandle *comm_handle )
 #endif
 #endif
 
-   if (num_recvs > 0 && alloc_dev_buffer)
+	int mpi_through_host = 1;	//default
+	if(cuda_aware_mpi==1 && !hypre_CommPkgFirstComm(comm_pkg))	//directly use cuda buffers if mpi is cuda aware and the comm is not first
+		mpi_through_host = 0;
+
+   if (num_recvs > 0 && alloc_dev_buffer && mpi_through_host==1)
    {
       HYPRE_Complex  *dptr_host;
       HYPRE_Int       size;
@@ -1236,10 +1570,15 @@ hypre_FinalizeCommunication( hypre_CommHandle *comm_handle )
       dptr_host = (HYPRE_Complex *) recv_buffers[0];
       dptr      = (HYPRE_Complex *) recv_buffers_data[0];
 
-      hypre_TMemcpy( dptr, dptr_host, HYPRE_Complex, size, 
+      hypre_TMemcpy( dptr, dptr_host, HYPRE_Complex, size,
                      HYPRE_MEMORY_DEVICE, HYPRE_MEMORY_HOST );
    }
 
+#if defined( MERGE_COMM_KERNELS ) && defined( HYPRE_USING_CUDA )
+	std::vector<unsigned int> dptr_h_array, kptr_h_array, length_h_array, stride_h_array, unit_stride_h_array;
+	unsigned int maxx=0, maxy=0, maxz=0;
+#endif
+
    for (i = 0; i < num_recvs; i++)
    {
       comm_type = hypre_CommPkgRecvType(comm_pkg, i);
@@ -1269,38 +1608,139 @@ hypre_FinalizeCommunication( hypre_CommHandle *comm_handle )
          {
             kptr = lptr + ll*stride_array[ndim];
 
-#define DEVICE_VAR is_device_ptr(kptr,dptr)
-            hypre_BasicBoxLoop2Begin(ndim, length_array,
-                                     stride_array, ki,
-                                     unitst_array, di);
-            {
-               if (action > 0)
-               {
-                  kptr[ki] += dptr[di];
-               }
-               else
-               {
-                  kptr[ki] = dptr[di];
-               }
+#if defined( MERGE_COMM_KERNELS ) && defined( HYPRE_USING_CUDA )
+            if(hypre_exec_policy == HYPRE_MEMORY_DEVICE){
+            	num_arrays++;
+				maxx = (maxx < length_array[0]) ? length_array[0] : maxx;
+				maxy = (maxy < length_array[1]) ? length_array[1] : maxy;
+				maxz = (maxz < length_array[2]) ? length_array[2] : maxz;
+				if(hypre_CommPkgAdjustSize(comm_pkg) < 2){
+					dptr_h_array.push_back((unsigned int)(dptr - recv_buffers_data[0]));
+					kptr_h_array.push_back((unsigned int)(kptr - recv_data));
+					for (d = 0; d < ndim; d++){
+						length_h_array.push_back(length_array[d]);
+						stride_h_array.push_back(stride_array[d]);
+					}
+
+					for (d = 0; d <= ndim; d++)
+						unit_stride_h_array.push_back(unitst_array[d]);
+				}
             }
-            hypre_BoxLoop2End(ki, di);
-#undef DEVICE_VAR
-
-            dptr += unitst_array[ndim];
+			if(hypre_exec_policy != HYPRE_MEMORY_DEVICE)
+#endif
+			{
+				#define DEVICE_VAR is_device_ptr(kptr,dptr)
+				hypre_BasicBoxLoop2Begin(ndim, length_array,
+						stride_array, ki,
+						unitst_array, di);
+				{
+					if (action > 0)
+					{
+						kptr[ki] += dptr[di];
+					}
+					else
+					{
+						kptr[ki] = dptr[di];
+					}
+				}
+				hypre_BoxLoop2End(ki, di);
+				#undef DEVICE_VAR
+			}
+			dptr += unitst_array[ndim];
          }
       }
    }
 
+#if defined( MERGE_COMM_KERNELS ) && defined( HYPRE_USING_CUDA )
+
+	if(num_arrays>0 && hypre_exec_policy == HYPRE_MEMORY_DEVICE){
+
+		//CUDA_CALL(cudaDeviceSynchronize());
+		char *device_metadata = hypre_CommPkgDeviceRecvMetadata(comm_pkg);
+
+		if(hypre_CommPkgAdjustSize(comm_pkg) < 2)	//copy these offsets only for first 2 comms. Later offsets and lengths wont change
+		{
+			unsigned int int_array_size = 2*num_arrays /*dptr and kptr offsets*/
+			 	 	 	 	   + num_arrays*ndim /* length_d_array */
+							   + num_arrays*ndim /* stride_d_array */
+							   + num_arrays*(ndim + 1); /* unit_stride_d_array */
+
+			unsigned int total_size = int_array_size*sizeof(unsigned int);
+
+			char *host_buff = (char *)malloc(total_size);
+			unsigned int offset = 0;
+			memcpy(host_buff + offset, dptr_h_array.data(), dptr_h_array.size() * sizeof(unsigned int));
+			offset += dptr_h_array.size() * sizeof(unsigned int);
+			memcpy(host_buff + offset, kptr_h_array.data(), kptr_h_array.size() * sizeof(unsigned int));
+			offset += kptr_h_array.size() * sizeof(unsigned int);
+			memcpy(host_buff + offset, length_h_array.data(), length_h_array.size() * sizeof(unsigned int));
+			offset += length_h_array.size() * sizeof(unsigned int);
+			memcpy(host_buff + offset, stride_h_array.data(), stride_h_array.size() * sizeof(unsigned int));
+			offset += stride_h_array.size() * sizeof(unsigned int);
+			memcpy(host_buff + offset, unit_stride_h_array.data(), unit_stride_h_array.size() * sizeof(unsigned int));
+
+			if(hypre_CommPkgAdjustSize(comm_pkg) == 0){	//allocate buffers during first comm. store them in comm_pkg reuse later.
+				device_metadata = hypre_CTAlloc(char, total_size, HYPRE_MEMORY_DEVICE);
+				hypre_CommPkgDeviceRecvMetadata(comm_pkg) = device_metadata ;
+			}
+
+			CUDA_CALL(cudaMemcpy(device_metadata, host_buff, total_size, cudaMemcpyHostToDevice));
+			free(host_buff);
+		}
+
+		HYPRE_Complex *dptr_d = recv_buffers_data[0];	//gpu buffers
+		HYPRE_Complex *kptr_d = recv_data;	//send data pointer
+
+
+
+		BoxLoopforall3D_custom(HYPRE_MEMORY_DEVICE, maxx, maxy, maxz*num_arrays, [=] __device__(int idx, int idy, int idz_combined){
+			int i = idz_combined / maxz;
+			int idz = idz_combined % maxz;
+
+			unsigned int      *dptr_d_array=NULL, *kptr_d_array=NULL, *length_d_array=NULL, *stride_d_array=NULL, *unit_stride_d_array=NULL;
+			dptr_d_array   = (unsigned int *) device_metadata;
+			kptr_d_array   = dptr_d_array + num_arrays;
+			length_d_array = kptr_d_array + num_arrays;
+			stride_d_array = length_d_array + num_arrays*(ndim);
+			unit_stride_d_array = stride_d_array + num_arrays*(ndim);
+
+			if(i<num_arrays){
+				HYPRE_Complex *dptr = dptr_d + dptr_d_array[i];
+				HYPRE_Complex *kptr = kptr_d + kptr_d_array[i];
+				unsigned int nx = length_d_array[i*(ndim)], ny = length_d_array[i*(ndim) + 1], nz = length_d_array[i*(ndim) + 2];
+				unsigned int *d_stride_array = &stride_d_array[i*(ndim)];
+				unsigned int *unit_stride = &unit_stride_d_array[i*(ndim+1)];
+
+				if(idx < nx && idy < ny && idz < nz){
+					HYPRE_Int di, ki;
+					di = idx*unit_stride[0] + idy*unit_stride[1] + idz*unit_stride[2];
+					ki = idx*d_stride_array[0] + idy*d_stride_array[1] + idz*d_stride_array[2];
+
+					if (action > 0)
+						kptr[ki] += dptr[di];
+					else
+						kptr[ki] = dptr[di];
+				}
+			}
+
+		});
+
+
+
+	}
+#endif
+
    /*--------------------------------------------------------------------
     * turn off first communication indicator
     *--------------------------------------------------------------------*/
 
    hypre_CommPkgFirstComm(comm_pkg) = 0;
+   hypre_CommPkgAdjustSize(comm_pkg)++;
 
    /*--------------------------------------------------------------------
     * Free up communication handle
     *--------------------------------------------------------------------*/
-
+#ifndef PERMANENT_BUFF
    hypre_TFree(hypre_CommHandleRequests(comm_handle), HYPRE_MEMORY_HOST);
    hypre_TFree(hypre_CommHandleStatus(comm_handle), HYPRE_MEMORY_HOST);
    if (num_sends > 0)
@@ -1312,8 +1752,6 @@ hypre_FinalizeCommunication( hypre_CommHandle *comm_handle )
        hypre_TFree(recv_buffers[0], HYPRE_MEMORY_HOST);
    }
 
-   hypre_TFree(comm_handle, HYPRE_MEMORY_HOST);
-
    if (send_buffers == send_buffers_data) 
    {
       hypre_TFree(send_buffers, HYPRE_MEMORY_HOST);
@@ -1332,6 +1770,9 @@ hypre_FinalizeCommunication( hypre_CommHandle *comm_handle )
       hypre_TFree(recv_buffers, HYPRE_MEMORY_HOST);
       hypre_TFree(recv_buffers_data, HYPRE_MEMORY_HOST);
    }
+#endif
+
+   hypre_TFree(comm_handle, HYPRE_MEMORY_HOST);
 
    return hypre_error_flag;
 }
@@ -1431,6 +1872,7 @@ hypre_CommPkgDestroy( hypre_CommPkg *comm_pkg )
    HYPRE_Int      **orders;
    HYPRE_Int        i;
 
+
    if (comm_pkg)
    {
       /* note that entries are allocated in two stages for To/Recv */
@@ -1462,9 +1904,37 @@ hypre_CommPkgDestroy( hypre_CommPkg *comm_pkg )
 
       hypre_TFree(hypre_CommPkgIdentityOrder(comm_pkg), HYPRE_MEMORY_HOST);
 
+
+#ifdef PERMANENT_BUFF
+      //release buffer memory for the comm package
+	   hypre_TFree(hypre_CommPkgRequests(comm_pkg), HYPRE_MEMORY_HOST);
+	   hypre_TFree(hypre_CommPkgStatus(comm_pkg), HYPRE_MEMORY_HOST);
+
+	   if (hypre_CommPkgNumSends(comm_pkg) > 0)
+	   {
+		   hypre_TFree(hypre_CommPkgSendBuffers(comm_pkg)[0], HYPRE_MEMORY_HOST);
+		   hypre_TFree(hypre_CommPkgSendBuffers(comm_pkg), HYPRE_MEMORY_HOST);
+		   hypre_TFree(hypre_CommPkgSendBuffersDevice(comm_pkg)[0], HYPRE_MEMORY_DEVICE);
+		   hypre_TFree(hypre_CommPkgSendBuffersDevice(comm_pkg), HYPRE_MEMORY_HOST);
+	   }
+
+	   if (hypre_CommPkgNumRecvs(comm_pkg) > 0)
+	   {
+		   hypre_TFree(hypre_CommPkgRecvBuffers(comm_pkg)[0], HYPRE_MEMORY_HOST);
+		   hypre_TFree(hypre_CommPkgRecvBuffers(comm_pkg), HYPRE_MEMORY_HOST);
+		   hypre_TFree(hypre_CommPkgRecvBuffersDevice(comm_pkg)[0], HYPRE_MEMORY_DEVICE);
+		   hypre_TFree(hypre_CommPkgRecvBuffersDevice(comm_pkg), HYPRE_MEMORY_HOST);
+	   }
+
+	   hypre_TFree(hypre_CommPkgDeviceSendMetadata(comm_pkg), HYPRE_MEMORY_DEVICE);
+	   hypre_TFree(hypre_CommPkgDeviceRecvMetadata(comm_pkg), HYPRE_MEMORY_DEVICE);
+#endif
+
+
       hypre_TFree(comm_pkg, HYPRE_MEMORY_HOST);
    }
 
+
    return hypre_error_flag;
 }
 
diff --git a/src/struct_mv/struct_communication.h b/src/struct_mv/struct_communication.h
index 7cdb6fd2e..04ca6d234 100644
--- a/src/struct_mv/struct_communication.h
+++ b/src/struct_mv/struct_communication.h
@@ -13,6 +13,10 @@
 #ifndef hypre_COMMUNICATION_HEADER
 #define hypre_COMMUNICATION_HEADER
 
+//Damodar: allocate permanent buff for every comm package at the begining. Reuse same for every comm.
+//saves repeated malloc, free and pointer manipulations for every call.
+//more importantly allows allocation of gpu buffs and creating permanent pointers.
+//#define PERMANENT_BUFF
 /*--------------------------------------------------------------------------
  * hypre_CommInfo:
  *
@@ -122,6 +126,24 @@ typedef struct hypre_CommPkg_struct
    hypre_Index       identity_dir;
    HYPRE_Int        *identity_order;
 
+//#ifdef PERMANENT_BUFF
+   //copied from hypre_CommHandle. if this is enabled, just copy values from comm package
+   //to hypre_CommHandle to maintain backward compatibility.
+
+   hypre_MPI_Request  	*requests;
+   hypre_MPI_Status   	*status;
+
+   HYPRE_Complex 		**send_buffers;
+   HYPRE_Complex		**recv_buffers;
+
+   HYPRE_Complex      	**send_buffers_data;
+   HYPRE_Complex      	**recv_buffers_data;
+
+   HYPRE_Int 			adjust_size;	//used to count adjustment as per CommType "size" change. Needs to be done only twice - for first and for second comm.
+   char 				*device_send_metadata, *device_recv_metadata;
+//#endif
+
+
 } hypre_CommPkg;
 
 /*--------------------------------------------------------------------------
@@ -238,6 +260,19 @@ typedef struct hypre_CommHandle_struct
 #define hypre_CommPkgIdentityDir(comm_pkg)     (comm_pkg -> identity_dir)
 #define hypre_CommPkgIdentityOrder(comm_pkg)   (comm_pkg -> identity_order)
 
+
+//#ifdef PERMANENT_BUFF
+#define hypre_CommPkgRequests(comm_pkg)    (comm_pkg -> requests)
+#define hypre_CommPkgStatus(comm_pkg)      (comm_pkg -> status)
+#define hypre_CommPkgSendBuffers(comm_pkg) (comm_pkg -> send_buffers)
+#define hypre_CommPkgRecvBuffers(comm_pkg) (comm_pkg -> recv_buffers)
+#define hypre_CommPkgSendBuffersDevice(comm_pkg)    (comm_pkg -> send_buffers_data)
+#define hypre_CommPkgRecvBuffersDevice(comm_pkg)    (comm_pkg -> recv_buffers_data)
+#define hypre_CommPkgAdjustSize(comm_pkg)    (comm_pkg -> adjust_size)
+#define hypre_CommPkgDeviceSendMetadata(comm_pkg)    (comm_pkg -> device_send_metadata)
+#define hypre_CommPkgDeviceRecvMetadata(comm_pkg)    (comm_pkg -> device_recv_metadata)
+//#endif
+
 /*--------------------------------------------------------------------------
  * Accessor macros: hypre_CommHandle
  *--------------------------------------------------------------------------*/
diff --git a/src/utilities/gpuMem.c b/src/utilities/gpuMem.c
index 8dd0c5403..220bdc280 100644
--- a/src/utilities/gpuMem.c
+++ b/src/utilities/gpuMem.c
@@ -3,6 +3,9 @@
 #endif
 #include "_hypre_utilities.h"
 
+//Damodar: 3D loop
+int ___cuda_threads_x = 32, ___cuda_threads_y = 4, ___cuda_threads_z = 4;
+
 #if defined(HYPRE_USING_UNIFIED_MEMORY)
 size_t memsize(const void *ptr){
    return ((size_t*)ptr)[-HYPRE_MEM_PAD_LEN];
diff --git a/src/utilities/hypre_general.c b/src/utilities/hypre_general.c
index 84d46fdf9..d00663e79 100644
--- a/src/utilities/hypre_general.c
+++ b/src/utilities/hypre_general.c
@@ -21,6 +21,9 @@
  * hypre initialization
  *
  *****************************************************************************/
+//set environment variable CUDA_AWARE_MPI to 1 to use if the platform supports cuda-aware mpi.
+//used in struct_commnucation.c to pass device pointer to mpi routines.
+int cuda_aware_mpi=0;
 
 void
 HYPRE_Init( hypre_int argc, char *argv[] )
@@ -45,6 +48,13 @@ HYPRE_Init( hypre_int argc, char *argv[] )
    {
       cuda_reduce_buffer = hypre_TAlloc(HYPRE_double6, 1024, HYPRE_MEMORY_DEVICE);
    }
+
+   const char * cuda_aware_mpi_str = getenv("CUDA_AWARE_MPI");
+   if(cuda_aware_mpi_str){
+	   if(atoi(cuda_aware_mpi_str) > 0)
+		   cuda_aware_mpi = 1;
+   }
+
 #endif
 
 #if defined(HYPRE_USING_UNIFIED_MEMORY)
diff --git a/src/utilities/hypre_memory.c b/src/utilities/hypre_memory.c
index 1e2b52628..2538bb891 100644
--- a/src/utilities/hypre_memory.c
+++ b/src/utilities/hypre_memory.c
@@ -188,7 +188,7 @@ hypre_DeviceMalloc(size_t size, HYPRE_Int zeroinit)
 #elif defined(HYPRE_USING_CUDA)
    /* cudaMalloc */
    hypre_CheckErrorDevice( cudaMalloc(&ptr, size + sizeof(size_t)*HYPRE_MEM_PAD_LEN) );
-   hypre_CheckErrorDevice( cudaDeviceSynchronize() );
+   //hypre_CheckErrorDevice( cudaDeviceSynchronize() );
    hypre_Memcpy(ptr, &size, sizeof(size_t), HYPRE_MEMORY_DEVICE, HYPRE_MEMORY_HOST);
    size_t *sp = (size_t*) ptr;
    ptr = (void*) (&sp[HYPRE_MEM_PAD_LEN]);
diff --git a/src/utilities/mpistubs.c b/src/utilities/mpistubs.c
index 207609f2c..61d5815a5 100644
--- a/src/utilities/mpistubs.c
+++ b/src/utilities/mpistubs.c
@@ -1,1331 +1,1481 @@
 /*BHEADER**********************************************************************
- * Copyright (c) 2008,  Lawrence Livermore National Security, LLC.
- * Produced at the Lawrence Livermore National Laboratory.
- * This file is part of HYPRE.  See file COPYRIGHT for details.
- *
- * HYPRE is free software; you can redistribute it and/or modify it under the
- * terms of the GNU Lesser General Public License (as published by the Free
- * Software Foundation) version 2.1 dated February 1999.
- *
- * $Revision$
- ***********************************************************************EHEADER*/
+* Copyright (c) 2008,  Lawrence Livermore National Security, LLC.
+* Produced at the Lawrence Livermore National Laboratory.
+* This file is part of HYPRE.  See file COPYRIGHT for details.
+*
+* HYPRE is free software; you can redistribute it and/or modify it under the
+* terms of the GNU Lesser General Public License (as published by the Free
+* Software Foundation) version 2.1 dated February 1999.
+*
+* $Revision$
+***********************************************************************EHEADER*/
 
 #include "_hypre_utilities.h"
+#include <sys/time.h>
 
 /******************************************************************************
- * This routine is the same in both the sequential and normal cases
- *
- * The 'comm' argument for MPI_Comm_f2c is MPI_Fint, which is always the size of
- * a Fortran integer and hence usually the size of hypre_int.
- ****************************************************************************/
+* This routine is the same in both the sequential and normal cases
+*
+* The 'comm' argument for MPI_Comm_f2c is MPI_Fint, which is always the size of
+* a Fortran integer and hence usually the size of hypre_int.
+****************************************************************************/
 
 hypre_MPI_Comm
 hypre_MPI_Comm_f2c( hypre_int comm )
 {
 #ifdef HYPRE_HAVE_MPI_COMM_F2C
-   return (hypre_MPI_Comm) MPI_Comm_f2c(comm);
+return (hypre_MPI_Comm) MPI_Comm_f2c(comm);
 #else
-   return (hypre_MPI_Comm) (size_t)comm;
+return (hypre_MPI_Comm) (size_t)comm;
 #endif
 }
 
 /******************************************************************************
- * MPI stubs to generate serial codes without mpi
- *****************************************************************************/
+* MPI stubs to generate serial codes without mpi
+*****************************************************************************/
 
 #ifdef HYPRE_SEQUENTIAL
 
 HYPRE_Int
 hypre_MPI_Init( hypre_int   *argc,
-                char      ***argv )
+char      ***argv )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Finalize( )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Abort( hypre_MPI_Comm comm,
-                 HYPRE_Int      errorcode )
+HYPRE_Int      errorcode )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Real
 hypre_MPI_Wtime( )
 {
-   return(0.0);
+return(0.0);
 }
 
 HYPRE_Real
 hypre_MPI_Wtick( )
 {
-   return(0.0);
+return(0.0);
 }
 
 HYPRE_Int
 hypre_MPI_Barrier( hypre_MPI_Comm comm )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Comm_create( hypre_MPI_Comm   comm,
-                       hypre_MPI_Group  group,
-                       hypre_MPI_Comm  *newcomm )
+hypre_MPI_Group  group,
+hypre_MPI_Comm  *newcomm )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Comm_dup( hypre_MPI_Comm  comm,
-                    hypre_MPI_Comm *newcomm )
+hypre_MPI_Comm *newcomm )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Comm_size( hypre_MPI_Comm  comm,
-                     HYPRE_Int      *size )
+HYPRE_Int      *size )
 { 
-   *size = 1;
-   return(0);
+*size = 1;
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Comm_rank( hypre_MPI_Comm  comm,
-                     HYPRE_Int      *rank )
+HYPRE_Int      *rank )
 { 
-   *rank = 0;
-   return(0);
+*rank = 0;
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Comm_free( hypre_MPI_Comm *comm )
 {
-   return 0;
+return 0;
 }
 
 HYPRE_Int
 hypre_MPI_Comm_group( hypre_MPI_Comm   comm,
-                      hypre_MPI_Group *group )
+hypre_MPI_Group *group )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Comm_split( hypre_MPI_Comm  comm,
-                      HYPRE_Int       n,
-                      HYPRE_Int       m,
-                      hypre_MPI_Comm *comms )
+HYPRE_Int       n,
+HYPRE_Int       m,
+hypre_MPI_Comm *comms )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Group_incl( hypre_MPI_Group  group,
-                      HYPRE_Int        n,
-                      HYPRE_Int       *ranks,
-                      hypre_MPI_Group *newgroup )
+HYPRE_Int        n,
+HYPRE_Int       *ranks,
+hypre_MPI_Group *newgroup )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Group_free( hypre_MPI_Group *group )
 {
-   return 0;
+return 0;
 }
 
 HYPRE_Int
 hypre_MPI_Address( void           *location,
-                   hypre_MPI_Aint *address )
+hypre_MPI_Aint *address )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Get_count( hypre_MPI_Status   *status,
-                     hypre_MPI_Datatype  datatype,
-                     HYPRE_Int          *count )
+hypre_MPI_Datatype  datatype,
+HYPRE_Int          *count )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Alltoall( void               *sendbuf,
-                    HYPRE_Int           sendcount,
-                    hypre_MPI_Datatype  sendtype,
-                    void               *recvbuf,
-                    HYPRE_Int           recvcount,
-                    hypre_MPI_Datatype  recvtype,
-                    hypre_MPI_Comm      comm )
+HYPRE_Int           sendcount,
+hypre_MPI_Datatype  sendtype,
+void               *recvbuf,
+HYPRE_Int           recvcount,
+hypre_MPI_Datatype  recvtype,
+hypre_MPI_Comm      comm )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Allgather( void               *sendbuf,
-                     HYPRE_Int           sendcount,
-                     hypre_MPI_Datatype  sendtype,
-                     void               *recvbuf,
-                     HYPRE_Int           recvcount,
-                     hypre_MPI_Datatype  recvtype,
-                     hypre_MPI_Comm      comm ) 
-{
-   HYPRE_Int i;
-
-   switch (sendtype)
-   {
-      case hypre_MPI_INT:
-      {
-         HYPRE_Int *crecvbuf = (HYPRE_Int *)recvbuf;
-         HYPRE_Int *csendbuf = (HYPRE_Int *)sendbuf;
-         for (i = 0; i < sendcount; i++)
-         {
-	    crecvbuf[i] = csendbuf[i];
-         }
-      } 
-      break;
-
-      case hypre_MPI_DOUBLE:
-      {
-         double *crecvbuf = (double *)recvbuf;
-         double *csendbuf = (double *)sendbuf;
-         for (i = 0; i < sendcount; i++)
-         {
-	    crecvbuf[i] = csendbuf[i];
-         }
-      } 
-      break;
-
-      case hypre_MPI_CHAR:
-      {
-         char *crecvbuf = (char *)recvbuf;
-         char *csendbuf = (char *)sendbuf;
-         for (i = 0; i < sendcount; i++)
-         {
-	    crecvbuf[i] = csendbuf[i];
-         }
-      } 
-      break;
-
-      case hypre_MPI_BYTE:
-      {
-         hypre_Memcpy(recvbuf,  sendbuf,  sendcount, HYPRE_MEMORY_HOST, HYPRE_MEMORY_HOST);
-      } 
-      break;
-
-      case hypre_MPI_REAL:
-      {
-         HYPRE_Real *crecvbuf = (HYPRE_Real *)recvbuf;
-         HYPRE_Real *csendbuf = (HYPRE_Real *)sendbuf;
-         for (i = 0; i < sendcount; i++)
-         {
-	    crecvbuf[i] = csendbuf[i];
-         }
-      } 
-      break;
-
-      case hypre_MPI_COMPLEX:
-      {
-         HYPRE_Complex *crecvbuf = (HYPRE_Complex *)recvbuf;
-         HYPRE_Complex *csendbuf = (HYPRE_Complex *)sendbuf;
-         for (i = 0; i < sendcount; i++)
-         {
-	    crecvbuf[i] = csendbuf[i];
-         }
-      } 
-      break;
-   }
-
-   return(0);
+HYPRE_Int           sendcount,
+hypre_MPI_Datatype  sendtype,
+void               *recvbuf,
+HYPRE_Int           recvcount,
+hypre_MPI_Datatype  recvtype,
+hypre_MPI_Comm      comm ) 
+{
+HYPRE_Int i;
+
+switch (sendtype)
+{
+case hypre_MPI_INT:
+{
+HYPRE_Int *crecvbuf = (HYPRE_Int *)recvbuf;
+HYPRE_Int *csendbuf = (HYPRE_Int *)sendbuf;
+for (i = 0; i < sendcount; i++)
+{
+	crecvbuf[i] = csendbuf[i];
+}
+} 
+break;
+
+case hypre_MPI_DOUBLE:
+{
+double *crecvbuf = (double *)recvbuf;
+double *csendbuf = (double *)sendbuf;
+for (i = 0; i < sendcount; i++)
+{
+	crecvbuf[i] = csendbuf[i];
+}
+} 
+break;
+
+case hypre_MPI_CHAR:
+{
+char *crecvbuf = (char *)recvbuf;
+char *csendbuf = (char *)sendbuf;
+for (i = 0; i < sendcount; i++)
+{
+	crecvbuf[i] = csendbuf[i];
+}
+} 
+break;
+
+case hypre_MPI_BYTE:
+{
+hypre_Memcpy(recvbuf,  sendbuf,  sendcount, HYPRE_MEMORY_HOST, HYPRE_MEMORY_HOST);
+} 
+break;
+
+case hypre_MPI_REAL:
+{
+HYPRE_Real *crecvbuf = (HYPRE_Real *)recvbuf;
+HYPRE_Real *csendbuf = (HYPRE_Real *)sendbuf;
+for (i = 0; i < sendcount; i++)
+{
+	crecvbuf[i] = csendbuf[i];
+}
+} 
+break;
+
+case hypre_MPI_COMPLEX:
+{
+HYPRE_Complex *crecvbuf = (HYPRE_Complex *)recvbuf;
+HYPRE_Complex *csendbuf = (HYPRE_Complex *)sendbuf;
+for (i = 0; i < sendcount; i++)
+{
+	crecvbuf[i] = csendbuf[i];
+}
+} 
+break;
+}
+
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Allgatherv( void               *sendbuf,
-                      HYPRE_Int           sendcount,
-                      hypre_MPI_Datatype  sendtype,
-                      void               *recvbuf,
-                      HYPRE_Int          *recvcounts,
-                      HYPRE_Int          *displs, 
-                      hypre_MPI_Datatype  recvtype,
-                      hypre_MPI_Comm      comm ) 
+HYPRE_Int           sendcount,
+hypre_MPI_Datatype  sendtype,
+void               *recvbuf,
+HYPRE_Int          *recvcounts,
+HYPRE_Int          *displs, 
+hypre_MPI_Datatype  recvtype,
+hypre_MPI_Comm      comm ) 
 { 
-   return ( hypre_MPI_Allgather(sendbuf, sendcount, sendtype,
-                                recvbuf, *recvcounts, recvtype, comm) );
+return ( hypre_MPI_Allgather(sendbuf, sendcount, sendtype,
+	recvbuf, *recvcounts, recvtype, comm) );
 }
 
 HYPRE_Int
 hypre_MPI_Gather( void               *sendbuf,
-                  HYPRE_Int           sendcount,
-                  hypre_MPI_Datatype  sendtype,
-                  void               *recvbuf,
-                  HYPRE_Int           recvcount,
-                  hypre_MPI_Datatype  recvtype,
-                  HYPRE_Int           root,
-                  hypre_MPI_Comm      comm )
+HYPRE_Int           sendcount,
+hypre_MPI_Datatype  sendtype,
+void               *recvbuf,
+HYPRE_Int           recvcount,
+hypre_MPI_Datatype  recvtype,
+HYPRE_Int           root,
+hypre_MPI_Comm      comm )
 {
-   return ( hypre_MPI_Allgather(sendbuf, sendcount, sendtype,
-                                recvbuf, recvcount, recvtype, comm) );
+return ( hypre_MPI_Allgather(sendbuf, sendcount, sendtype,
+	recvbuf, recvcount, recvtype, comm) );
 }
 
 HYPRE_Int
 hypre_MPI_Gatherv( void              *sendbuf,
-                  HYPRE_Int           sendcount,
-                  hypre_MPI_Datatype  sendtype,
-                  void               *recvbuf,
-                  HYPRE_Int          *recvcounts,
-                  HYPRE_Int          *displs,
-                  hypre_MPI_Datatype  recvtype,
-                  HYPRE_Int           root,
-                  hypre_MPI_Comm      comm )
+HYPRE_Int           sendcount,
+hypre_MPI_Datatype  sendtype,
+void               *recvbuf,
+HYPRE_Int          *recvcounts,
+HYPRE_Int          *displs,
+hypre_MPI_Datatype  recvtype,
+HYPRE_Int           root,
+hypre_MPI_Comm      comm )
 {
-   return ( hypre_MPI_Allgather(sendbuf, sendcount, sendtype,
-                                recvbuf, *recvcounts, recvtype, comm) );
+return ( hypre_MPI_Allgather(sendbuf, sendcount, sendtype,
+	recvbuf, *recvcounts, recvtype, comm) );
 }
 
 HYPRE_Int
 hypre_MPI_Scatter( void               *sendbuf,
-                   HYPRE_Int           sendcount,
-                   hypre_MPI_Datatype  sendtype,
-                   void               *recvbuf,
-                   HYPRE_Int           recvcount,
-                   hypre_MPI_Datatype  recvtype,
-                   HYPRE_Int           root,
-                   hypre_MPI_Comm      comm )
+HYPRE_Int           sendcount,
+hypre_MPI_Datatype  sendtype,
+void               *recvbuf,
+HYPRE_Int           recvcount,
+hypre_MPI_Datatype  recvtype,
+HYPRE_Int           root,
+hypre_MPI_Comm      comm )
 {
-   return ( hypre_MPI_Allgather(sendbuf, sendcount, sendtype,
-                                recvbuf, recvcount, recvtype, comm) );
+return ( hypre_MPI_Allgather(sendbuf, sendcount, sendtype,
+	recvbuf, recvcount, recvtype, comm) );
 }
 
 HYPRE_Int
 hypre_MPI_Scatterv( void               *sendbuf,
-                   HYPRE_Int           *sendcounts,
-                   HYPRE_Int           *displs,
-                   hypre_MPI_Datatype   sendtype,
-                   void                *recvbuf,
-                   HYPRE_Int            recvcount,
-                   hypre_MPI_Datatype   recvtype,
-                   HYPRE_Int            root,
-                   hypre_MPI_Comm       comm )
+HYPRE_Int           *sendcounts,
+HYPRE_Int           *displs,
+hypre_MPI_Datatype   sendtype,
+void                *recvbuf,
+HYPRE_Int            recvcount,
+hypre_MPI_Datatype   recvtype,
+HYPRE_Int            root,
+hypre_MPI_Comm       comm )
 {
-   return ( hypre_MPI_Allgather(sendbuf, *sendcounts, sendtype,
-                                recvbuf, recvcount, recvtype, comm) );
+return ( hypre_MPI_Allgather(sendbuf, *sendcounts, sendtype,
+	recvbuf, recvcount, recvtype, comm) );
 }
 
 HYPRE_Int
 hypre_MPI_Bcast( void               *buffer,
-                 HYPRE_Int           count,
-                 hypre_MPI_Datatype  datatype,
-                 HYPRE_Int           root,
-                 hypre_MPI_Comm      comm ) 
+HYPRE_Int           count,
+hypre_MPI_Datatype  datatype,
+HYPRE_Int           root,
+hypre_MPI_Comm      comm ) 
 { 
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Send( void               *buf,
-                HYPRE_Int           count,
-                hypre_MPI_Datatype  datatype,
-                HYPRE_Int           dest,
-                HYPRE_Int           tag,
-                hypre_MPI_Comm      comm ) 
+HYPRE_Int           count,
+hypre_MPI_Datatype  datatype,
+HYPRE_Int           dest,
+HYPRE_Int           tag,
+hypre_MPI_Comm      comm ) 
 { 
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Recv( void               *buf,
-                HYPRE_Int           count,
-                hypre_MPI_Datatype  datatype,
-                HYPRE_Int           source,
-                HYPRE_Int           tag,
-                hypre_MPI_Comm      comm,
-                hypre_MPI_Status   *status )
+HYPRE_Int           count,
+hypre_MPI_Datatype  datatype,
+HYPRE_Int           source,
+HYPRE_Int           tag,
+hypre_MPI_Comm      comm,
+hypre_MPI_Status   *status )
 { 
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Isend( void               *buf,
-                 HYPRE_Int           count,
-                 hypre_MPI_Datatype  datatype,
-                 HYPRE_Int           dest,
-                 HYPRE_Int           tag,
-                 hypre_MPI_Comm      comm,
-                 hypre_MPI_Request  *request )
+HYPRE_Int           count,
+hypre_MPI_Datatype  datatype,
+HYPRE_Int           dest,
+HYPRE_Int           tag,
+hypre_MPI_Comm      comm,
+hypre_MPI_Request  *request )
 { 
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Irecv( void               *buf,
-                 HYPRE_Int           count,
-                 hypre_MPI_Datatype  datatype,
-                 HYPRE_Int           source,
-                 HYPRE_Int           tag,
-                 hypre_MPI_Comm      comm,
-                 hypre_MPI_Request  *request )
+HYPRE_Int           count,
+hypre_MPI_Datatype  datatype,
+HYPRE_Int           source,
+HYPRE_Int           tag,
+hypre_MPI_Comm      comm,
+hypre_MPI_Request  *request )
 { 
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Send_init( void               *buf,
-                     HYPRE_Int           count,
-                     hypre_MPI_Datatype  datatype,
-                     HYPRE_Int           dest,
-                     HYPRE_Int           tag, 
-                     hypre_MPI_Comm      comm,
-                     hypre_MPI_Request  *request )
+HYPRE_Int           count,
+hypre_MPI_Datatype  datatype,
+HYPRE_Int           dest,
+HYPRE_Int           tag, 
+hypre_MPI_Comm      comm,
+hypre_MPI_Request  *request )
 {
-   return 0;
+return 0;
 }
 
 HYPRE_Int
 hypre_MPI_Recv_init( void               *buf,
-                     HYPRE_Int           count,
-                     hypre_MPI_Datatype  datatype,
-                     HYPRE_Int           dest,
-                     HYPRE_Int           tag, 
-                     hypre_MPI_Comm      comm,
-                     hypre_MPI_Request  *request )
+HYPRE_Int           count,
+hypre_MPI_Datatype  datatype,
+HYPRE_Int           dest,
+HYPRE_Int           tag, 
+hypre_MPI_Comm      comm,
+hypre_MPI_Request  *request )
 {
-   return 0;
+return 0;
 }
 
 HYPRE_Int
 hypre_MPI_Irsend( void               *buf,
-                  HYPRE_Int           count,
-                  hypre_MPI_Datatype  datatype,
-                  HYPRE_Int           dest,
-                  HYPRE_Int           tag, 
-                  hypre_MPI_Comm      comm,
-                  hypre_MPI_Request  *request )
+HYPRE_Int           count,
+hypre_MPI_Datatype  datatype,
+HYPRE_Int           dest,
+HYPRE_Int           tag, 
+hypre_MPI_Comm      comm,
+hypre_MPI_Request  *request )
 {
-   return 0;
+return 0;
 }
 
 HYPRE_Int
 hypre_MPI_Startall( HYPRE_Int          count,
-                    hypre_MPI_Request *array_of_requests )
+hypre_MPI_Request *array_of_requests )
 {
-   return 0;
+return 0;
 }
 
 HYPRE_Int
 hypre_MPI_Probe( HYPRE_Int         source,
-                 HYPRE_Int         tag,
-                 hypre_MPI_Comm    comm,
-                 hypre_MPI_Status *status )
+HYPRE_Int         tag,
+hypre_MPI_Comm    comm,
+hypre_MPI_Status *status )
 {
-   return 0;
+return 0;
 }
 
 HYPRE_Int
 hypre_MPI_Iprobe( HYPRE_Int         source,
-                  HYPRE_Int         tag,
-                  hypre_MPI_Comm    comm,
-                  HYPRE_Int        *flag,
-                  hypre_MPI_Status *status )
+HYPRE_Int         tag,
+hypre_MPI_Comm    comm,
+HYPRE_Int        *flag,
+hypre_MPI_Status *status )
 {
-   return 0;
+return 0;
 }
 
 HYPRE_Int
 hypre_MPI_Test( hypre_MPI_Request *request,
-                HYPRE_Int         *flag,
-                hypre_MPI_Status  *status )
+HYPRE_Int         *flag,
+hypre_MPI_Status  *status )
 {
-   *flag = 1;
-   return(0);
+*flag = 1;
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Testall( HYPRE_Int          count,
-                   hypre_MPI_Request *array_of_requests,
-                   HYPRE_Int         *flag,
-                   hypre_MPI_Status  *array_of_statuses )
+hypre_MPI_Request *array_of_requests,
+HYPRE_Int         *flag,
+hypre_MPI_Status  *array_of_statuses )
 {
-   *flag = 1;
-   return(0);
+*flag = 1;
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Wait( hypre_MPI_Request *request,
-                hypre_MPI_Status  *status )
+hypre_MPI_Status  *status )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Waitall( HYPRE_Int          count,
-                   hypre_MPI_Request *array_of_requests,
-                   hypre_MPI_Status  *array_of_statuses )
+hypre_MPI_Request *array_of_requests,
+hypre_MPI_Status  *array_of_statuses )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Waitany( HYPRE_Int          count,
-                   hypre_MPI_Request *array_of_requests,
-                   HYPRE_Int         *index,
-                   hypre_MPI_Status  *status )
+hypre_MPI_Request *array_of_requests,
+HYPRE_Int         *index,
+hypre_MPI_Status  *status )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Allreduce( void              *sendbuf,
-                     void              *recvbuf,
-                     HYPRE_Int          count,
-                     hypre_MPI_Datatype datatype,
-                     hypre_MPI_Op       op,
-                     hypre_MPI_Comm     comm )
+void              *recvbuf,
+HYPRE_Int          count,
+hypre_MPI_Datatype datatype,
+hypre_MPI_Op       op,
+hypre_MPI_Comm     comm )
 { 
-   HYPRE_Int i;
-   
-   switch (datatype)
-   {
-      case hypre_MPI_INT:
-      {
-         HYPRE_Int *crecvbuf = (HYPRE_Int *)recvbuf;
-         HYPRE_Int *csendbuf = (HYPRE_Int *)sendbuf;
-         for (i = 0; i < count; i++)
-         {
-            crecvbuf[i] = csendbuf[i];
-         }
-         
-      } 
-      break;
-
-      case hypre_MPI_DOUBLE:
-      {
-         double *crecvbuf = (double *)recvbuf;
-         double *csendbuf = (double *)sendbuf;
-         for (i = 0; i < count; i++)
-         {
-            crecvbuf[i] = csendbuf[i];
-         }
-      } 
-      break;
-
-      case hypre_MPI_CHAR:
-      {
-         char *crecvbuf = (char *)recvbuf;
-         char *csendbuf = (char *)sendbuf;
-         for (i = 0; i < count; i++)
-         {
-            crecvbuf[i] = csendbuf[i];
-         }
-      } 
-      break;
-
-      case hypre_MPI_BYTE:
-      {
-         hypre_Memcpy(recvbuf,  sendbuf,  count, HYPRE_MEMORY_HOST, HYPRE_MEMORY_HOST);
-      } 
-      break;
-
-      case hypre_MPI_REAL:
-      {
-         HYPRE_Real *crecvbuf = (HYPRE_Real *)recvbuf;
-         HYPRE_Real *csendbuf = (HYPRE_Real *)sendbuf;
-         for (i = 0; i < count; i++)
-         {
-            crecvbuf[i] = csendbuf[i];
-         }
-      } 
-      break;
-
-      case hypre_MPI_COMPLEX:
-      {
-         HYPRE_Complex *crecvbuf = (HYPRE_Complex *)recvbuf;
-         HYPRE_Complex *csendbuf = (HYPRE_Complex *)sendbuf;
-         for (i = 0; i < count; i++)
-         {
-            crecvbuf[i] = csendbuf[i];
-         }
-      } 
-      break;
-   }
-
-   return 0;
+HYPRE_Int i;
+
+switch (datatype)
+{
+case hypre_MPI_INT:
+{
+HYPRE_Int *crecvbuf = (HYPRE_Int *)recvbuf;
+HYPRE_Int *csendbuf = (HYPRE_Int *)sendbuf;
+for (i = 0; i < count; i++)
+{
+	crecvbuf[i] = csendbuf[i];
+}
+
+} 
+break;
+
+case hypre_MPI_DOUBLE:
+{
+double *crecvbuf = (double *)recvbuf;
+double *csendbuf = (double *)sendbuf;
+for (i = 0; i < count; i++)
+{
+	crecvbuf[i] = csendbuf[i];
+}
+} 
+break;
+
+case hypre_MPI_CHAR:
+{
+char *crecvbuf = (char *)recvbuf;
+char *csendbuf = (char *)sendbuf;
+for (i = 0; i < count; i++)
+{
+	crecvbuf[i] = csendbuf[i];
+}
+} 
+break;
+
+case hypre_MPI_BYTE:
+{
+hypre_Memcpy(recvbuf,  sendbuf,  count, HYPRE_MEMORY_HOST, HYPRE_MEMORY_HOST);
+} 
+break;
+
+case hypre_MPI_REAL:
+{
+HYPRE_Real *crecvbuf = (HYPRE_Real *)recvbuf;
+HYPRE_Real *csendbuf = (HYPRE_Real *)sendbuf;
+for (i = 0; i < count; i++)
+{
+	crecvbuf[i] = csendbuf[i];
+}
+} 
+break;
+
+case hypre_MPI_COMPLEX:
+{
+HYPRE_Complex *crecvbuf = (HYPRE_Complex *)recvbuf;
+HYPRE_Complex *csendbuf = (HYPRE_Complex *)sendbuf;
+for (i = 0; i < count; i++)
+{
+	crecvbuf[i] = csendbuf[i];
+}
+} 
+break;
+}
+
+return 0;
 }
 
 HYPRE_Int
 hypre_MPI_Reduce( void               *sendbuf,
-                  void               *recvbuf,
-                  HYPRE_Int           count,
-                  hypre_MPI_Datatype  datatype,
-                  hypre_MPI_Op        op,
-                  HYPRE_Int           root,
-                  hypre_MPI_Comm      comm )
+void               *recvbuf,
+HYPRE_Int           count,
+hypre_MPI_Datatype  datatype,
+hypre_MPI_Op        op,
+HYPRE_Int           root,
+hypre_MPI_Comm      comm )
 { 
-   hypre_MPI_Allreduce(sendbuf, recvbuf, count, datatype, op, comm);
-   return 0;
+hypre_MPI_Allreduce(sendbuf, recvbuf, count, datatype, op, comm);
+return 0;
 }
 
 HYPRE_Int
 hypre_MPI_Scan( void               *sendbuf,
-                void               *recvbuf,
-                HYPRE_Int           count,
-                hypre_MPI_Datatype  datatype,
-                hypre_MPI_Op        op,
-                hypre_MPI_Comm      comm )
+void               *recvbuf,
+HYPRE_Int           count,
+hypre_MPI_Datatype  datatype,
+hypre_MPI_Op        op,
+hypre_MPI_Comm      comm )
 { 
-   hypre_MPI_Allreduce(sendbuf, recvbuf, count, datatype, op, comm);
-   return 0;
+hypre_MPI_Allreduce(sendbuf, recvbuf, count, datatype, op, comm);
+return 0;
 }
 
 HYPRE_Int
 hypre_MPI_Request_free( hypre_MPI_Request *request )
 {
-   return 0;
+return 0;
 }
 
 HYPRE_Int
 hypre_MPI_Type_contiguous( HYPRE_Int           count,
-                           hypre_MPI_Datatype  oldtype,
-                           hypre_MPI_Datatype *newtype )
+hypre_MPI_Datatype  oldtype,
+hypre_MPI_Datatype *newtype )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Type_vector( HYPRE_Int           count,
-                       HYPRE_Int           blocklength,
-                       HYPRE_Int           stride,
-                       hypre_MPI_Datatype  oldtype,
-                       hypre_MPI_Datatype *newtype )
+HYPRE_Int           blocklength,
+HYPRE_Int           stride,
+hypre_MPI_Datatype  oldtype,
+hypre_MPI_Datatype *newtype )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Type_hvector( HYPRE_Int           count,
-                        HYPRE_Int           blocklength,
-                        hypre_MPI_Aint      stride,
-                        hypre_MPI_Datatype  oldtype,
-                        hypre_MPI_Datatype *newtype )
+HYPRE_Int           blocklength,
+hypre_MPI_Aint      stride,
+hypre_MPI_Datatype  oldtype,
+hypre_MPI_Datatype *newtype )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Type_struct( HYPRE_Int           count,
-                       HYPRE_Int          *array_of_blocklengths,
-                       hypre_MPI_Aint     *array_of_displacements,
-                       hypre_MPI_Datatype *array_of_types,
-                       hypre_MPI_Datatype *newtype )
+HYPRE_Int          *array_of_blocklengths,
+hypre_MPI_Aint     *array_of_displacements,
+hypre_MPI_Datatype *array_of_types,
+hypre_MPI_Datatype *newtype )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Type_commit( hypre_MPI_Datatype *datatype )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Type_free( hypre_MPI_Datatype *datatype )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Op_create( hypre_MPI_User_function *function, hypre_int commute, hypre_MPI_Op *op )
 {
-   return(0);
+return(0);
 }
 
 HYPRE_Int
 hypre_MPI_Op_free( hypre_MPI_Op *op )
 {
-   return(0);
+return(0);
 }
 
 #if defined(HYPRE_USING_CUDA) || defined(HYPRE_USING_DEVICE_OPENMP)
 HYPRE_Int hypre_MPI_Comm_split_type( hypre_MPI_Comm comm, HYPRE_Int split_type, HYPRE_Int key, hypre_MPI_Info info, hypre_MPI_Comm *newcomm )
 {
-   return (0);
+return (0);
 }
 
 HYPRE_Int hypre_MPI_Info_create( hypre_MPI_Info *info )
 {
-   return (0);
+return (0);
 }
 
 HYPRE_Int hypre_MPI_Info_free( hypre_MPI_Info *info )
 {
-   return (0);
+return (0);
 }
 #endif
 
 /******************************************************************************
- * MPI stubs to do casting of HYPRE_Int and hypre_int correctly
- *****************************************************************************/
+* MPI stubs to do casting of HYPRE_Int and hypre_int correctly
+*****************************************************************************/
 
 #else
 
+double _hypre_comm_time=0.0;
+
+#define start_time()	\
+struct timeval  tv1, tv2;	\
+gettimeofday(&tv1, NULL);	
+
+#define end_time()	\
+gettimeofday(&tv2, NULL);	\
+_hypre_comm_time += (double) (tv2.tv_usec - tv1.tv_usec) / 1000000.0 + (double) (tv2.tv_sec - tv1.tv_sec);
+
 HYPRE_Int
 hypre_MPI_Init( hypre_int   *argc,
-                char      ***argv )
+		char      ***argv )
 {
-   return (HYPRE_Int) MPI_Init(argc, argv);
+	return (HYPRE_Int) MPI_Init(argc, argv);
 }
 
 HYPRE_Int
 hypre_MPI_Finalize( )
 {
-   return (HYPRE_Int) MPI_Finalize();
+	return (HYPRE_Int) MPI_Finalize();
 }
 
 HYPRE_Int
 hypre_MPI_Abort( hypre_MPI_Comm comm,
-                 HYPRE_Int      errorcode )
+		HYPRE_Int      errorcode )
 {
-   return (HYPRE_Int) MPI_Abort(comm, (hypre_int)errorcode);
+	return (HYPRE_Int) MPI_Abort(comm, (hypre_int)errorcode);
 }
 
 HYPRE_Real
 hypre_MPI_Wtime( )
 {
-   return MPI_Wtime();
+	return MPI_Wtime();
 }
 
 HYPRE_Real
 hypre_MPI_Wtick( )
 {
-   return MPI_Wtick();
+	return MPI_Wtick();
 }
 
 HYPRE_Int
 hypre_MPI_Barrier( hypre_MPI_Comm comm )
 {
-   return (HYPRE_Int) MPI_Barrier(comm);
+	start_time();
+	HYPRE_Int ret = (HYPRE_Int) MPI_Barrier(comm);
+	end_time();
+	return ret;
 }
 
 HYPRE_Int
 hypre_MPI_Comm_create( hypre_MPI_Comm   comm,
-                       hypre_MPI_Group  group,
-                       hypre_MPI_Comm  *newcomm )
+		hypre_MPI_Group  group,
+		hypre_MPI_Comm  *newcomm )
 {
-   return (HYPRE_Int) MPI_Comm_create(comm, group, newcomm);
+	start_time();
+	HYPRE_Int ret = (HYPRE_Int) MPI_Comm_create(comm, group, newcomm);
+	end_time();
+	return ret;
 }
 
 HYPRE_Int
 hypre_MPI_Comm_dup( hypre_MPI_Comm  comm,
-                    hypre_MPI_Comm *newcomm )
+		hypre_MPI_Comm *newcomm )
 {
-   return (HYPRE_Int) MPI_Comm_dup(comm, newcomm);
+	start_time();
+	HYPRE_Int ret =  (HYPRE_Int) MPI_Comm_dup(comm, newcomm);
+	end_time();
+	return ret;
 }
 
 HYPRE_Int
 hypre_MPI_Comm_size( hypre_MPI_Comm  comm,
-                     HYPRE_Int      *size )
+		HYPRE_Int      *size )
 {
-   hypre_int mpi_size;
-   HYPRE_Int ierr;
-   ierr = (HYPRE_Int) MPI_Comm_size(comm, &mpi_size);
-   *size = (HYPRE_Int) mpi_size;
-   return ierr;
+	start_time();
+	hypre_int mpi_size;
+	HYPRE_Int ierr;
+	ierr = (HYPRE_Int) MPI_Comm_size(comm, &mpi_size);
+	*size = (HYPRE_Int) mpi_size;
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Comm_rank( hypre_MPI_Comm  comm,
-                     HYPRE_Int      *rank )
+		HYPRE_Int      *rank )
 { 
-   hypre_int mpi_rank;
-   HYPRE_Int ierr;
-   ierr = (HYPRE_Int) MPI_Comm_rank(comm, &mpi_rank);
-   *rank = (HYPRE_Int) mpi_rank;
-   return ierr;
+	start_time();
+	hypre_int mpi_rank;
+	HYPRE_Int ierr;
+	ierr = (HYPRE_Int) MPI_Comm_rank(comm, &mpi_rank);
+	*rank = (HYPRE_Int) mpi_rank;
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Comm_free( hypre_MPI_Comm *comm )
 {
-   return (HYPRE_Int) MPI_Comm_free(comm);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Comm_free(comm);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Comm_group( hypre_MPI_Comm   comm,
-                      hypre_MPI_Group *group )
+		hypre_MPI_Group *group )
 {
-   return (HYPRE_Int) MPI_Comm_group(comm, group);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Comm_group(comm, group);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Comm_split( hypre_MPI_Comm  comm,
-                      HYPRE_Int       n,
-                      HYPRE_Int       m,
-                      hypre_MPI_Comm *comms )
+		HYPRE_Int       n,
+		HYPRE_Int       m,
+		hypre_MPI_Comm *comms )
 {
-   return (HYPRE_Int) MPI_Comm_split(comm, (hypre_int)n, (hypre_int)m, comms);
+	start_time();
+	HYPRE_Int ierr =  (HYPRE_Int) MPI_Comm_split(comm, (hypre_int)n, (hypre_int)m, comms);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Group_incl( hypre_MPI_Group  group,
-                      HYPRE_Int        n,
-                      HYPRE_Int       *ranks,
-                      hypre_MPI_Group *newgroup )
+		HYPRE_Int        n,
+		HYPRE_Int       *ranks,
+		hypre_MPI_Group *newgroup )
 {
-   hypre_int *mpi_ranks;
-   HYPRE_Int  i;
-   HYPRE_Int  ierr;
+	start_time();
+	hypre_int *mpi_ranks;
+	HYPRE_Int  i;
+	HYPRE_Int  ierr;
 
-   mpi_ranks = hypre_TAlloc(hypre_int,  n, HYPRE_MEMORY_HOST);
-   for (i = 0; i < n; i++)
-   {
-      mpi_ranks[i] = (hypre_int) ranks[i];
-   }
-   ierr = (HYPRE_Int) MPI_Group_incl(group, (hypre_int)n, mpi_ranks, newgroup);
-   hypre_TFree(mpi_ranks, HYPRE_MEMORY_HOST);
+	mpi_ranks = hypre_TAlloc(hypre_int,  n, HYPRE_MEMORY_HOST);
+	for (i = 0; i < n; i++)
+	{
+		mpi_ranks[i] = (hypre_int) ranks[i];
+	}
+	ierr = (HYPRE_Int) MPI_Group_incl(group, (hypre_int)n, mpi_ranks, newgroup);
+	hypre_TFree(mpi_ranks, HYPRE_MEMORY_HOST);
 
-   return ierr;
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Group_free( hypre_MPI_Group *group )
 {
-   return (HYPRE_Int) MPI_Group_free(group);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Group_free(group);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Address( void           *location,
-                   hypre_MPI_Aint *address )
+		hypre_MPI_Aint *address )
 {
+	start_time();
 #if MPI_VERSION > 1
-   return (HYPRE_Int) MPI_Get_address(location, address);
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Get_address(location, address);
 #else
-   return (HYPRE_Int) MPI_Address(location, address);
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Address(location, address);
 #endif
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Get_count( hypre_MPI_Status   *status,
-                     hypre_MPI_Datatype  datatype,
-                     HYPRE_Int          *count )
+		hypre_MPI_Datatype  datatype,
+		HYPRE_Int          *count )
 {
-   hypre_int mpi_count;
-   HYPRE_Int ierr;
-   ierr = (HYPRE_Int) MPI_Get_count(status, datatype, &mpi_count);
-   *count = (HYPRE_Int) mpi_count;
-   return ierr;
+	start_time();
+	hypre_int mpi_count;
+	HYPRE_Int ierr;
+	ierr = (HYPRE_Int) MPI_Get_count(status, datatype, &mpi_count);
+	*count = (HYPRE_Int) mpi_count;
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Alltoall( void               *sendbuf,
-                    HYPRE_Int           sendcount,
-                    hypre_MPI_Datatype  sendtype,
-                    void               *recvbuf,
-                    HYPRE_Int           recvcount,
-                    hypre_MPI_Datatype  recvtype,
-                    hypre_MPI_Comm      comm )
+		HYPRE_Int           sendcount,
+		hypre_MPI_Datatype  sendtype,
+		void               *recvbuf,
+		HYPRE_Int           recvcount,
+		hypre_MPI_Datatype  recvtype,
+		hypre_MPI_Comm      comm )
 {
-   return (HYPRE_Int) MPI_Alltoall(sendbuf, (hypre_int)sendcount, sendtype,
-                                   recvbuf, (hypre_int)recvcount, recvtype, comm);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Alltoall(sendbuf, (hypre_int)sendcount, sendtype,
+			recvbuf, (hypre_int)recvcount, recvtype, comm);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Allgather( void               *sendbuf,
-                     HYPRE_Int           sendcount,
-                     hypre_MPI_Datatype  sendtype,
-                     void               *recvbuf,
-                     HYPRE_Int           recvcount,
-                     hypre_MPI_Datatype  recvtype,
-                     hypre_MPI_Comm      comm ) 
+		HYPRE_Int           sendcount,
+		hypre_MPI_Datatype  sendtype,
+		void               *recvbuf,
+		HYPRE_Int           recvcount,
+		hypre_MPI_Datatype  recvtype,
+		hypre_MPI_Comm      comm ) 
 {
-   return (HYPRE_Int) MPI_Allgather(sendbuf, (hypre_int)sendcount, sendtype,
-                                    recvbuf, (hypre_int)recvcount, recvtype, comm);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Allgather(sendbuf, (hypre_int)sendcount, sendtype,
+			recvbuf, (hypre_int)recvcount, recvtype, comm);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Allgatherv( void               *sendbuf,
-                      HYPRE_Int           sendcount,
-                      hypre_MPI_Datatype  sendtype,
-                      void               *recvbuf,
-                      HYPRE_Int          *recvcounts,
-                      HYPRE_Int          *displs, 
-                      hypre_MPI_Datatype  recvtype,
-                      hypre_MPI_Comm      comm ) 
-{
-   hypre_int *mpi_recvcounts, *mpi_displs, csize;
-   HYPRE_Int  i;
-   HYPRE_Int  ierr;
-
-   MPI_Comm_size(comm, &csize);
-   mpi_recvcounts = hypre_TAlloc(hypre_int,  csize, HYPRE_MEMORY_HOST);
-   mpi_displs = hypre_TAlloc(hypre_int,  csize, HYPRE_MEMORY_HOST);
-   for (i = 0; i < csize; i++)
-   {
-      mpi_recvcounts[i] = (hypre_int) recvcounts[i];
-      mpi_displs[i] = (hypre_int) displs[i];
-   }
-   ierr = (HYPRE_Int) MPI_Allgatherv(sendbuf, (hypre_int)sendcount, sendtype,
-                                     recvbuf, mpi_recvcounts, mpi_displs, 
-                                     recvtype, comm);
-   hypre_TFree(mpi_recvcounts, HYPRE_MEMORY_HOST);
-   hypre_TFree(mpi_displs, HYPRE_MEMORY_HOST);
-
-   return ierr;
+		HYPRE_Int           sendcount,
+		hypre_MPI_Datatype  sendtype,
+		void               *recvbuf,
+		HYPRE_Int          *recvcounts,
+		HYPRE_Int          *displs, 
+		hypre_MPI_Datatype  recvtype,
+		hypre_MPI_Comm      comm ) 
+{
+	start_time();
+	hypre_int *mpi_recvcounts, *mpi_displs, csize;
+	HYPRE_Int  i;
+	HYPRE_Int  ierr;
+
+	MPI_Comm_size(comm, &csize);
+	mpi_recvcounts = hypre_TAlloc(hypre_int,  csize, HYPRE_MEMORY_HOST);
+	mpi_displs = hypre_TAlloc(hypre_int,  csize, HYPRE_MEMORY_HOST);
+	for (i = 0; i < csize; i++)
+	{
+		mpi_recvcounts[i] = (hypre_int) recvcounts[i];
+		mpi_displs[i] = (hypre_int) displs[i];
+	}
+	ierr = (HYPRE_Int) MPI_Allgatherv(sendbuf, (hypre_int)sendcount, sendtype,
+			recvbuf, mpi_recvcounts, mpi_displs, 
+			recvtype, comm);
+	hypre_TFree(mpi_recvcounts, HYPRE_MEMORY_HOST);
+	hypre_TFree(mpi_displs, HYPRE_MEMORY_HOST);
+
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Gather( void               *sendbuf,
-                  HYPRE_Int           sendcount,
-                  hypre_MPI_Datatype  sendtype,
-                  void               *recvbuf,
-                  HYPRE_Int           recvcount,
-                  hypre_MPI_Datatype  recvtype,
-                  HYPRE_Int           root,
-                  hypre_MPI_Comm      comm )
+		HYPRE_Int           sendcount,
+		hypre_MPI_Datatype  sendtype,
+		void               *recvbuf,
+		HYPRE_Int           recvcount,
+		hypre_MPI_Datatype  recvtype,
+		HYPRE_Int           root,
+		hypre_MPI_Comm      comm )
 {
-   return (HYPRE_Int) MPI_Gather(sendbuf, (hypre_int) sendcount, sendtype,
-                                 recvbuf, (hypre_int) recvcount, recvtype,
-                                 (hypre_int)root, comm);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Gather(sendbuf, (hypre_int) sendcount, sendtype,
+			recvbuf, (hypre_int) recvcount, recvtype,
+			(hypre_int)root, comm);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Gatherv(void               *sendbuf,
-                  HYPRE_Int           sendcount,
-                  hypre_MPI_Datatype  sendtype,
-                  void               *recvbuf,
-                  HYPRE_Int          *recvcounts,
-                  HYPRE_Int          *displs,
-                  hypre_MPI_Datatype  recvtype,
-                  HYPRE_Int           root,
-                  hypre_MPI_Comm      comm )
-{
-   hypre_int *mpi_recvcounts = NULL;
-   hypre_int *mpi_displs = NULL;
-   hypre_int csize, croot;
-   HYPRE_Int  i;
-   HYPRE_Int  ierr;
-
-   MPI_Comm_size(comm, &csize);
-   MPI_Comm_rank(comm, &croot);
-   if (croot == (hypre_int) root)
-   {
-      mpi_recvcounts = hypre_TAlloc(hypre_int,  csize, HYPRE_MEMORY_HOST);
-      mpi_displs = hypre_TAlloc(hypre_int,  csize, HYPRE_MEMORY_HOST);
-      for (i = 0; i < csize; i++)
-      {
-         mpi_recvcounts[i] = (hypre_int) recvcounts[i];
-         mpi_displs[i] = (hypre_int) displs[i];
-      }
-   }
-   ierr = (HYPRE_Int) MPI_Gatherv(sendbuf, (hypre_int)sendcount, sendtype,
-                                     recvbuf, mpi_recvcounts, mpi_displs, 
-                                     recvtype, (hypre_int) root, comm);
-   hypre_TFree(mpi_recvcounts, HYPRE_MEMORY_HOST);
-   hypre_TFree(mpi_displs, HYPRE_MEMORY_HOST);
-
-   return ierr;
+		HYPRE_Int           sendcount,
+		hypre_MPI_Datatype  sendtype,
+		void               *recvbuf,
+		HYPRE_Int          *recvcounts,
+		HYPRE_Int          *displs,
+		hypre_MPI_Datatype  recvtype,
+		HYPRE_Int           root,
+		hypre_MPI_Comm      comm )
+{
+	start_time();
+	hypre_int *mpi_recvcounts = NULL;
+	hypre_int *mpi_displs = NULL;
+	hypre_int csize, croot;
+	HYPRE_Int  i;
+	HYPRE_Int  ierr;
+
+	MPI_Comm_size(comm, &csize);
+	MPI_Comm_rank(comm, &croot);
+	if (croot == (hypre_int) root)
+	{
+		mpi_recvcounts = hypre_TAlloc(hypre_int,  csize, HYPRE_MEMORY_HOST);
+		mpi_displs = hypre_TAlloc(hypre_int,  csize, HYPRE_MEMORY_HOST);
+		for (i = 0; i < csize; i++)
+		{
+			mpi_recvcounts[i] = (hypre_int) recvcounts[i];
+			mpi_displs[i] = (hypre_int) displs[i];
+		}
+	}
+	ierr = (HYPRE_Int) MPI_Gatherv(sendbuf, (hypre_int)sendcount, sendtype,
+			recvbuf, mpi_recvcounts, mpi_displs, 
+			recvtype, (hypre_int) root, comm);
+	hypre_TFree(mpi_recvcounts, HYPRE_MEMORY_HOST);
+	hypre_TFree(mpi_displs, HYPRE_MEMORY_HOST);
+
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Scatter( void               *sendbuf,
-                   HYPRE_Int           sendcount,
-                   hypre_MPI_Datatype  sendtype,
-                   void               *recvbuf,
-                   HYPRE_Int           recvcount,
-                   hypre_MPI_Datatype  recvtype,
-                   HYPRE_Int           root,
-                   hypre_MPI_Comm      comm )
+		HYPRE_Int           sendcount,
+		hypre_MPI_Datatype  sendtype,
+		void               *recvbuf,
+		HYPRE_Int           recvcount,
+		hypre_MPI_Datatype  recvtype,
+		HYPRE_Int           root,
+		hypre_MPI_Comm      comm )
 {
-   return (HYPRE_Int) MPI_Scatter(sendbuf, (hypre_int)sendcount, sendtype,
-                                  recvbuf, (hypre_int)recvcount, recvtype,
-                                  (hypre_int)root, comm);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Scatter(sendbuf, (hypre_int)sendcount, sendtype,
+			recvbuf, (hypre_int)recvcount, recvtype,
+			(hypre_int)root, comm);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Scatterv(void               *sendbuf,
-                   HYPRE_Int          *sendcounts,
-                   HYPRE_Int          *displs,
-                   hypre_MPI_Datatype  sendtype,
-                   void               *recvbuf,
-                   HYPRE_Int           recvcount,
-                   hypre_MPI_Datatype  recvtype,
-                   HYPRE_Int           root,
-                   hypre_MPI_Comm      comm )
-{
-   hypre_int *mpi_sendcounts = NULL;
-   hypre_int *mpi_displs = NULL;
-   hypre_int csize, croot;
-   HYPRE_Int  i;
-   HYPRE_Int  ierr;
-
-   MPI_Comm_size(comm, &csize);
-   MPI_Comm_rank(comm, &croot);
-   if (croot == (hypre_int) root)
-   {
-      mpi_sendcounts = hypre_TAlloc(hypre_int,  csize, HYPRE_MEMORY_HOST);
-      mpi_displs = hypre_TAlloc(hypre_int,  csize, HYPRE_MEMORY_HOST);
-      for (i = 0; i < csize; i++)
-      {
-         mpi_sendcounts[i] = (hypre_int) sendcounts[i];
-         mpi_displs[i] = (hypre_int) displs[i];
-      }
-   }
-   ierr = (HYPRE_Int) MPI_Scatterv(sendbuf, mpi_sendcounts, mpi_displs, sendtype,
-                                     recvbuf, (hypre_int) recvcount, 
-                                     recvtype, (hypre_int) root, comm);
-   hypre_TFree(mpi_sendcounts, HYPRE_MEMORY_HOST);
-   hypre_TFree(mpi_displs, HYPRE_MEMORY_HOST);
-
-   return ierr;
+		HYPRE_Int          *sendcounts,
+		HYPRE_Int          *displs,
+		hypre_MPI_Datatype  sendtype,
+		void               *recvbuf,
+		HYPRE_Int           recvcount,
+		hypre_MPI_Datatype  recvtype,
+		HYPRE_Int           root,
+		hypre_MPI_Comm      comm )
+{
+	start_time();
+	hypre_int *mpi_sendcounts = NULL;
+	hypre_int *mpi_displs = NULL;
+	hypre_int csize, croot;
+	HYPRE_Int  i;
+	HYPRE_Int  ierr;
+
+	MPI_Comm_size(comm, &csize);
+	MPI_Comm_rank(comm, &croot);
+	if (croot == (hypre_int) root)
+	{
+		mpi_sendcounts = hypre_TAlloc(hypre_int,  csize, HYPRE_MEMORY_HOST);
+		mpi_displs = hypre_TAlloc(hypre_int,  csize, HYPRE_MEMORY_HOST);
+		for (i = 0; i < csize; i++)
+		{
+			mpi_sendcounts[i] = (hypre_int) sendcounts[i];
+			mpi_displs[i] = (hypre_int) displs[i];
+		}
+	}
+	ierr = (HYPRE_Int) MPI_Scatterv(sendbuf, mpi_sendcounts, mpi_displs, sendtype,
+			recvbuf, (hypre_int) recvcount, 
+			recvtype, (hypre_int) root, comm);
+	hypre_TFree(mpi_sendcounts, HYPRE_MEMORY_HOST);
+	hypre_TFree(mpi_displs, HYPRE_MEMORY_HOST);
+
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Bcast( void               *buffer,
-                 HYPRE_Int           count,
-                 hypre_MPI_Datatype  datatype,
-                 HYPRE_Int           root,
-                 hypre_MPI_Comm      comm ) 
+		HYPRE_Int           count,
+		hypre_MPI_Datatype  datatype,
+		HYPRE_Int           root,
+		hypre_MPI_Comm      comm ) 
 { 
-   return (HYPRE_Int) MPI_Bcast(buffer, (hypre_int)count, datatype,
-                                (hypre_int)root, comm);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Bcast(buffer, (hypre_int)count, datatype,
+			(hypre_int)root, comm);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Send( void               *buf,
-                HYPRE_Int           count,
-                hypre_MPI_Datatype  datatype,
-                HYPRE_Int           dest,
-                HYPRE_Int           tag,
-                hypre_MPI_Comm      comm ) 
+		HYPRE_Int           count,
+		hypre_MPI_Datatype  datatype,
+		HYPRE_Int           dest,
+		HYPRE_Int           tag,
+		hypre_MPI_Comm      comm ) 
 { 
-   return (HYPRE_Int) MPI_Send(buf, (hypre_int)count, datatype,
-                               (hypre_int)dest, (hypre_int)tag, comm);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Send(buf, (hypre_int)count, datatype,
+			(hypre_int)dest, (hypre_int)tag, comm);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Recv( void               *buf,
-                HYPRE_Int           count,
-                hypre_MPI_Datatype  datatype,
-                HYPRE_Int           source,
-                HYPRE_Int           tag,
-                hypre_MPI_Comm      comm,
-                hypre_MPI_Status   *status )
+		HYPRE_Int           count,
+		hypre_MPI_Datatype  datatype,
+		HYPRE_Int           source,
+		HYPRE_Int           tag,
+		hypre_MPI_Comm      comm,
+		hypre_MPI_Status   *status )
 { 
-   return (HYPRE_Int) MPI_Recv(buf, (hypre_int)count, datatype,
-                               (hypre_int)source, (hypre_int)tag, comm, status);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Recv(buf, (hypre_int)count, datatype,
+			(hypre_int)source, (hypre_int)tag, comm, status);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Isend( void               *buf,
-                 HYPRE_Int           count,
-                 hypre_MPI_Datatype  datatype,
-                 HYPRE_Int           dest,
-                 HYPRE_Int           tag,
-                 hypre_MPI_Comm      comm,
-                 hypre_MPI_Request  *request )
+		HYPRE_Int           count,
+		hypre_MPI_Datatype  datatype,
+		HYPRE_Int           dest,
+		HYPRE_Int           tag,
+		hypre_MPI_Comm      comm,
+		hypre_MPI_Request  *request )
 { 
-   return (HYPRE_Int) MPI_Isend(buf, (hypre_int)count, datatype,
-                                (hypre_int)dest, (hypre_int)tag, comm, request);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Isend(buf, (hypre_int)count, datatype,
+			(hypre_int)dest, (hypre_int)tag, comm, request);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Irecv( void               *buf,
-                 HYPRE_Int           count,
-                 hypre_MPI_Datatype  datatype,
-                 HYPRE_Int           source,
-                 HYPRE_Int           tag,
-                 hypre_MPI_Comm      comm,
-                 hypre_MPI_Request  *request )
+		HYPRE_Int           count,
+		hypre_MPI_Datatype  datatype,
+		HYPRE_Int           source,
+		HYPRE_Int           tag,
+		hypre_MPI_Comm      comm,
+		hypre_MPI_Request  *request )
 { 
-   return (HYPRE_Int) MPI_Irecv(buf, (hypre_int)count, datatype,
-                                (hypre_int)source, (hypre_int)tag, comm, request);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Irecv(buf, (hypre_int)count, datatype,
+			(hypre_int)source, (hypre_int)tag, comm, request);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Send_init( void               *buf,
-                     HYPRE_Int           count,
-                     hypre_MPI_Datatype  datatype,
-                     HYPRE_Int           dest,
-                     HYPRE_Int           tag, 
-                     hypre_MPI_Comm      comm,
-                     hypre_MPI_Request  *request )
+		HYPRE_Int           count,
+		hypre_MPI_Datatype  datatype,
+		HYPRE_Int           dest,
+		HYPRE_Int           tag, 
+		hypre_MPI_Comm      comm,
+		hypre_MPI_Request  *request )
 {
-   return (HYPRE_Int) MPI_Send_init(buf, (hypre_int)count, datatype,
-                                    (hypre_int)dest, (hypre_int)tag,
-                                    comm, request);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Send_init(buf, (hypre_int)count, datatype,
+			(hypre_int)dest, (hypre_int)tag,
+			comm, request);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Recv_init( void               *buf,
-                     HYPRE_Int           count,
-                     hypre_MPI_Datatype  datatype,
-                     HYPRE_Int           dest,
-                     HYPRE_Int           tag, 
-                     hypre_MPI_Comm      comm,
-                     hypre_MPI_Request  *request )
+		HYPRE_Int           count,
+		hypre_MPI_Datatype  datatype,
+		HYPRE_Int           dest,
+		HYPRE_Int           tag, 
+		hypre_MPI_Comm      comm,
+		hypre_MPI_Request  *request )
 {
-   return (HYPRE_Int) MPI_Recv_init(buf, (hypre_int)count, datatype,
-                                    (hypre_int)dest, (hypre_int)tag,
-                                    comm, request);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Recv_init(buf, (hypre_int)count, datatype,
+			(hypre_int)dest, (hypre_int)tag,
+			comm, request);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Irsend( void               *buf,
-                  HYPRE_Int           count,
-                  hypre_MPI_Datatype  datatype,
-                  HYPRE_Int           dest,
-                  HYPRE_Int           tag, 
-                  hypre_MPI_Comm      comm,
-                  hypre_MPI_Request  *request )
+		HYPRE_Int           count,
+		hypre_MPI_Datatype  datatype,
+		HYPRE_Int           dest,
+		HYPRE_Int           tag, 
+		hypre_MPI_Comm      comm,
+		hypre_MPI_Request  *request )
 {
-   return (HYPRE_Int) MPI_Irsend(buf, (hypre_int)count, datatype,
-                                 (hypre_int)dest, (hypre_int)tag, comm, request);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Irsend(buf, (hypre_int)count, datatype,
+			(hypre_int)dest, (hypre_int)tag, comm, request);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Startall( HYPRE_Int          count,
-                    hypre_MPI_Request *array_of_requests )
+		hypre_MPI_Request *array_of_requests )
 {
-   return (HYPRE_Int) MPI_Startall((hypre_int)count, array_of_requests);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Startall((hypre_int)count, array_of_requests);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Probe( HYPRE_Int         source,
-                 HYPRE_Int         tag,
-                 hypre_MPI_Comm    comm,
-                 hypre_MPI_Status *status )
+		HYPRE_Int         tag,
+		hypre_MPI_Comm    comm,
+		hypre_MPI_Status *status )
 {
-   return (HYPRE_Int) MPI_Probe((hypre_int)source, (hypre_int)tag, comm, status);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Probe((hypre_int)source, (hypre_int)tag, comm, status);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Iprobe( HYPRE_Int         source,
-                  HYPRE_Int         tag,
-                  hypre_MPI_Comm    comm,
-                  HYPRE_Int        *flag,
-                  hypre_MPI_Status *status )
+		HYPRE_Int         tag,
+		hypre_MPI_Comm    comm,
+		HYPRE_Int        *flag,
+		hypre_MPI_Status *status )
 {
-   hypre_int mpi_flag;
-   HYPRE_Int ierr;
-   ierr = (HYPRE_Int) MPI_Iprobe((hypre_int)source, (hypre_int)tag, comm,
-                                 &mpi_flag, status);
-   *flag = (HYPRE_Int) mpi_flag;
-   return ierr;
+	start_time();
+	hypre_int mpi_flag;
+	HYPRE_Int ierr;
+	ierr = (HYPRE_Int) MPI_Iprobe((hypre_int)source, (hypre_int)tag, comm,
+			&mpi_flag, status);
+	*flag = (HYPRE_Int) mpi_flag;
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Test( hypre_MPI_Request *request,
-                HYPRE_Int         *flag,
-                hypre_MPI_Status  *status )
+		HYPRE_Int         *flag,
+		hypre_MPI_Status  *status )
 {
-   hypre_int mpi_flag;
-   HYPRE_Int ierr;
-   ierr = (HYPRE_Int) MPI_Test(request, &mpi_flag, status);
-   *flag = (HYPRE_Int) mpi_flag;
-   return ierr;
+	start_time();
+	hypre_int mpi_flag;
+	HYPRE_Int ierr;
+	ierr = (HYPRE_Int) MPI_Test(request, &mpi_flag, status);
+	*flag = (HYPRE_Int) mpi_flag;
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Testall( HYPRE_Int          count,
-                   hypre_MPI_Request *array_of_requests,
-                   HYPRE_Int         *flag,
-                   hypre_MPI_Status  *array_of_statuses )
+		hypre_MPI_Request *array_of_requests,
+		HYPRE_Int         *flag,
+		hypre_MPI_Status  *array_of_statuses )
 {
-   hypre_int mpi_flag;
-   HYPRE_Int ierr;
-   ierr = (HYPRE_Int) MPI_Testall((hypre_int)count, array_of_requests,
-                                  &mpi_flag, array_of_statuses);
-   *flag = (HYPRE_Int) mpi_flag;
-   return ierr;
+	start_time();
+	hypre_int mpi_flag;
+	HYPRE_Int ierr;
+	ierr = (HYPRE_Int) MPI_Testall((hypre_int)count, array_of_requests,
+			&mpi_flag, array_of_statuses);
+	*flag = (HYPRE_Int) mpi_flag;
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Wait( hypre_MPI_Request *request,
-                hypre_MPI_Status  *status )
+		hypre_MPI_Status  *status )
 {
-   return (HYPRE_Int) MPI_Wait(request, status);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Wait(request, status);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Waitall( HYPRE_Int          count,
-                   hypre_MPI_Request *array_of_requests,
-                   hypre_MPI_Status  *array_of_statuses )
+		hypre_MPI_Request *array_of_requests,
+		hypre_MPI_Status  *array_of_statuses )
 {
-   return (HYPRE_Int) MPI_Waitall((hypre_int)count,
-                                  array_of_requests, array_of_statuses);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Waitall((hypre_int)count,
+			array_of_requests, array_of_statuses);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Waitany( HYPRE_Int          count,
-                   hypre_MPI_Request *array_of_requests,
-                   HYPRE_Int         *index,
-                   hypre_MPI_Status  *status )
+		hypre_MPI_Request *array_of_requests,
+		HYPRE_Int         *index,
+		hypre_MPI_Status  *status )
 {
-   hypre_int mpi_index;
-   HYPRE_Int ierr;
-   ierr = (HYPRE_Int) MPI_Waitany((hypre_int)count, array_of_requests,
-                                  &mpi_index, status);
-   *index = (HYPRE_Int) mpi_index;
-   return ierr;
+	start_time();
+	hypre_int mpi_index;
+	HYPRE_Int ierr;
+	ierr = (HYPRE_Int) MPI_Waitany((hypre_int)count, array_of_requests,
+			&mpi_index, status);
+	*index = (HYPRE_Int) mpi_index;
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Allreduce( void              *sendbuf,
-                     void              *recvbuf,
-                     HYPRE_Int          count,
-                     hypre_MPI_Datatype datatype,
-                     hypre_MPI_Op       op,
-                     hypre_MPI_Comm     comm )
+		void              *recvbuf,
+		HYPRE_Int          count,
+		hypre_MPI_Datatype datatype,
+		hypre_MPI_Op       op,
+		hypre_MPI_Comm     comm )
 {
-   return (HYPRE_Int) MPI_Allreduce(sendbuf, recvbuf, (hypre_int)count,
-                                    datatype, op, comm);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Allreduce(sendbuf, recvbuf, (hypre_int)count,
+			datatype, op, comm);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Reduce( void               *sendbuf,
-                  void               *recvbuf,
-                  HYPRE_Int           count,
-                  hypre_MPI_Datatype  datatype,
-                  hypre_MPI_Op        op,
-                  HYPRE_Int           root,
-                  hypre_MPI_Comm      comm )
+		void               *recvbuf,
+		HYPRE_Int           count,
+		hypre_MPI_Datatype  datatype,
+		hypre_MPI_Op        op,
+		HYPRE_Int           root,
+		hypre_MPI_Comm      comm )
 { 
-   return (HYPRE_Int) MPI_Reduce(sendbuf, recvbuf, (hypre_int)count,
-                                 datatype, op, (hypre_int)root, comm);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Reduce(sendbuf, recvbuf, (hypre_int)count,
+			datatype, op, (hypre_int)root, comm);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Scan( void               *sendbuf,
-                void               *recvbuf,
-                HYPRE_Int           count,
-                hypre_MPI_Datatype  datatype,
-                hypre_MPI_Op        op,
-                hypre_MPI_Comm      comm )
+		void               *recvbuf,
+		HYPRE_Int           count,
+		hypre_MPI_Datatype  datatype,
+		hypre_MPI_Op        op,
+		hypre_MPI_Comm      comm )
 { 
-   return (HYPRE_Int) MPI_Scan(sendbuf, recvbuf, (hypre_int)count,
-                               datatype, op, comm);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Scan(sendbuf, recvbuf, (hypre_int)count,
+			datatype, op, comm);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Request_free( hypre_MPI_Request *request )
 {
-   return (HYPRE_Int) MPI_Request_free(request);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Request_free(request);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Type_contiguous( HYPRE_Int           count,
-                           hypre_MPI_Datatype  oldtype,
-                           hypre_MPI_Datatype *newtype )
+		hypre_MPI_Datatype  oldtype,
+		hypre_MPI_Datatype *newtype )
 {
-   return (HYPRE_Int) MPI_Type_contiguous((hypre_int)count, oldtype, newtype);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Type_contiguous((hypre_int)count, oldtype, newtype);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Type_vector( HYPRE_Int           count,
-                       HYPRE_Int           blocklength,
-                       HYPRE_Int           stride,
-                       hypre_MPI_Datatype  oldtype,
-                       hypre_MPI_Datatype *newtype )
+		HYPRE_Int           blocklength,
+		HYPRE_Int           stride,
+		hypre_MPI_Datatype  oldtype,
+		hypre_MPI_Datatype *newtype )
 {
-   return (HYPRE_Int) MPI_Type_vector((hypre_int)count, (hypre_int)blocklength,
-                                      (hypre_int)stride, oldtype, newtype);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Type_vector((hypre_int)count, (hypre_int)blocklength,
+			(hypre_int)stride, oldtype, newtype);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Type_hvector( HYPRE_Int           count,
-                        HYPRE_Int           blocklength,
-                        hypre_MPI_Aint      stride,
-                        hypre_MPI_Datatype  oldtype,
-                        hypre_MPI_Datatype *newtype )
+		HYPRE_Int           blocklength,
+		hypre_MPI_Aint      stride,
+		hypre_MPI_Datatype  oldtype,
+		hypre_MPI_Datatype *newtype )
 {
+	start_time();
 #if MPI_VERSION > 1
-      return (HYPRE_Int) MPI_Type_create_hvector((hypre_int)count, (hypre_int)blocklength,
-                                                 stride, oldtype, newtype);
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Type_create_hvector((hypre_int)count, (hypre_int)blocklength,
+			stride, oldtype, newtype);
 #else
-   return (HYPRE_Int) MPI_Type_hvector((hypre_int)count, (hypre_int)blocklength,
-                                       stride, oldtype, newtype);
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Type_hvector((hypre_int)count, (hypre_int)blocklength,
+	stride, oldtype, newtype);
 #endif
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Type_struct( HYPRE_Int           count,
-                       HYPRE_Int          *array_of_blocklengths,
-                       hypre_MPI_Aint     *array_of_displacements,
-                       hypre_MPI_Datatype *array_of_types,
-                       hypre_MPI_Datatype *newtype )
-{
-   hypre_int *mpi_array_of_blocklengths;
-   HYPRE_Int  i;
-   HYPRE_Int  ierr;
-
-   mpi_array_of_blocklengths = hypre_TAlloc(hypre_int,  count, HYPRE_MEMORY_HOST);
-   for (i = 0; i < count; i++)
-   {
-      mpi_array_of_blocklengths[i] = (hypre_int) array_of_blocklengths[i];
-   }
+		HYPRE_Int          *array_of_blocklengths,
+		hypre_MPI_Aint     *array_of_displacements,
+		hypre_MPI_Datatype *array_of_types,
+		hypre_MPI_Datatype *newtype )
+{
+	start_time();
+	hypre_int *mpi_array_of_blocklengths;
+	HYPRE_Int  i;
+	HYPRE_Int  ierr;
+
+	mpi_array_of_blocklengths = hypre_TAlloc(hypre_int,  count, HYPRE_MEMORY_HOST);
+	for (i = 0; i < count; i++)
+	{
+		mpi_array_of_blocklengths[i] = (hypre_int) array_of_blocklengths[i];
+	}
 
 #if MPI_VERSION > 1
-      ierr = (HYPRE_Int) MPI_Type_create_struct((hypre_int)count, mpi_array_of_blocklengths,
-                                                array_of_displacements, array_of_types,
-                                                newtype);
+	ierr = (HYPRE_Int) MPI_Type_create_struct((hypre_int)count, mpi_array_of_blocklengths,
+	array_of_displacements, array_of_types,
+	newtype);
 #else
-      ierr = (HYPRE_Int) MPI_Type_struct((hypre_int)count, mpi_array_of_blocklengths,
-                                         array_of_displacements, array_of_types,
-                                         newtype);
+ierr = (HYPRE_Int) MPI_Type_struct((hypre_int)count, mpi_array_of_blocklengths,
+	array_of_displacements, array_of_types,
+	newtype);
 #endif
 
-   hypre_TFree(mpi_array_of_blocklengths, HYPRE_MEMORY_HOST);
+hypre_TFree(mpi_array_of_blocklengths, HYPRE_MEMORY_HOST);
 
-   return ierr;
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Type_commit( hypre_MPI_Datatype *datatype )
 {
-   return (HYPRE_Int) MPI_Type_commit(datatype);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Type_commit(datatype);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Type_free( hypre_MPI_Datatype *datatype )
 {
-   return (HYPRE_Int) MPI_Type_free(datatype);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Type_free(datatype);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Op_free( hypre_MPI_Op *op )
 {
-   return (HYPRE_Int) MPI_Op_free(op);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Op_free(op);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Op_create( hypre_MPI_User_function *function, hypre_int commute, hypre_MPI_Op *op )
 {
-   return (HYPRE_Int) MPI_Op_create(function, commute, op);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Op_create(function, commute, op);
+	end_time();
+	return ierr;
 }
 
 #if defined(HYPRE_USING_CUDA) || defined(HYPRE_USING_DEVICE_OPENMP)
 HYPRE_Int
 hypre_MPI_Comm_split_type( hypre_MPI_Comm comm, HYPRE_Int split_type, HYPRE_Int key, hypre_MPI_Info info, hypre_MPI_Comm *newcomm )
 {
-   return (HYPRE_Int) MPI_Comm_split_type(comm, split_type, key, info, newcomm );
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Comm_split_type(comm, split_type, key, info, newcomm );
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Info_create( hypre_MPI_Info *info )
 {
-   return (HYPRE_Int) MPI_Info_create(info);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Info_create(info);
+	end_time();
+	return ierr;
 }
 
 HYPRE_Int
 hypre_MPI_Info_free( hypre_MPI_Info *info )
 {
-   return (HYPRE_Int) MPI_Info_free(info);
+	start_time();
+	HYPRE_Int ierr = (HYPRE_Int) MPI_Info_free(info);
+	end_time();
+	return ierr;
 }
 #endif
 
 #endif
+
